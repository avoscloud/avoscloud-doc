# LeanStorage 入门教程 &middot; {{platformName}}

开发者们，你们好！本教程将带你快速地理解和掌握 LeanCloud 的存储模块。我们会在示例项目的代码中，逐一地去熟悉几个核心的概念：`{{avUserName}}`、`{{avObjectName}}`、`{{avFileName}}`、`pointer`、`{{avQueryName}}` 和 `include`。在理解了这些基础知识后，就可以开始基于 LeanCloud 的快速开发了。

## 准备工作
* 选择下载你所需要的 [StorageStarted 源码](https://github.com/leancloud/StorageStarted)

## 学习方式
 1. 直接运行。你可以通过浏览 StorageStarted 的界面，同时查看 StorageStarted 里的代码，得到一个大体的印象。
 2. [创建一个新应用](https://leancloud.cn/applist.html#/newapp)。找到项目里的初始化代码，替换为自己的 App ID 和 App Key，然后再次运行。这时候，通过对比 StorageStarted 里的代码，同时观察自己控制台的数据变化，来全面深入地理解 LeanStorage。

## 开发步骤
### 使用 {{avUesrName}} 操作用户

打开应用后，我们看到的是登录界面。我们先点击进入注册页面，注册一个用户。

`{{avUesrName}}` 是用来描述一个用户的特殊对象，与之相关的数据都保存在 `_User` 数据表中。本质上，和下面所讲到的 `{{avObjectName}}` 是相同的。

输入用户名、密码和邮箱后，通过如下代码完成注册过程；成功后，在你的控制台的 `_User` 表里，会对应地生成一条数据，也就是刚刚注册成功的这名用户：

```java
    AVUser user = new AVUser();// 新建 AVUser 对象实例
    user.setUsername(username);// 设置用户名
    user.setPassword(password);// 设置密码
    user.setEmail(email);//设置邮箱
    user.signUpInBackground(new SignUpCallback() {
      @Override
      public void done(AVException e) {
        if (e == null) {
          // 注册成功，把用户对象赋值给当前用户 AVUser.getCurrentUser()
          startActivity(new Intent(RegisterActivity.this, MainActivity.class));
          RegisterActivity.this.finish();
        } else {
          // 失败的原因可能有多种，常见的是用户名已经存在。
          showProgress(false);
          Toast.makeText(RegisterActivity.this, e.getMessage(), Toast.LENGTH_SHORT).show();
        }
      }
    });
```

如果已有帐号，那就在登录页面，通过以下代码完成登录操作：

```java
    AVUser.logInInBackground(username, password, new LogInCallback<AVUser>() {
      @Override
      public void done(AVUser avUser, AVException e) {
        if (e == null) {
          LoginActivity.this.finish();
          startActivity(new Intent(LoginActivity.this, MainActivity.class));
        } else {
          showProgress(false);
          Toast.makeText(LoginActivity.this, e.getMessage(), Toast.LENGTH_SHORT).show();
        }
      }
    });
```

### 使用 {{avObjectName}} 新增数据

登录成功后，我们进入主页面。如果主页面没有任何内容，我们则点击进入发布页面，来发布一个新商品。

`{{avObjectName}}` 是 LeanStorage 对复杂对象的封装，每个 `{{avObjectName}}` 包含若干属性值对，也称键值对（key-value）。

`pointer`，本质上是指向另外一张表的指针。在下面这个案例里，`owner` 字段，就是 `Product` 表里，用来指向 `_User` 表的一名用户的指针。

`{{avFileName}}` 是用来描述一个文件的特殊对象，与之相关的数据都保存在 `_File` 数据表中。

依次输入标题、商品描述和金额，并从相册挑选一张商品图片后，通过如下代码完成发布过程；成功后，在你的控制台里会新增一张名为 `Product` 的表，表里有一条新数据，也就是刚刚发布成功的这条数据：

```java
    AVObject product = new AVObject("Product");
    product.put("title", mTitleEdit.getText().toString());
    product.put("description", mDiscriptionEdit.getText().toString());
    product.put("price", Integer.parseInt(mPriceEdit.getText().toString()));
    product.put("owner", AVUser.getCurrentUser());
    product.put("image", new AVFile("productPic", mImageBytes));
    product.saveInBackground(new SaveCallback() {
      @Override
      public void done(AVException e) {
        if (e == null) {
          mProgerss.setVisibility(View.GONE);
          PublishActivity.this.finish();
        } else {
          mProgerss.setVisibility(View.GONE);
          Toast.makeText(PublishActivity.this, e.getMessage(), Toast.LENGTH_SHORT).show();
        }
      }
    });
```

### 使用 {{avQueryName}} 进行查询

发布成功后，我们回到主页面。对 `Product` 表进行查询。

`{{avQueryName}}` 是构建针对 `{{avObjectName}}` 查询的基础类。

还记得前面提到的 `pointer`？`Product` 表里的 `owner` 字段，就是一个 `pointer` 型字段，它仅包含 3 个键值对的信息，数据形式为：

```
  "owner": {
    "__type": "Pointer",
    "className": "_User",
    "objectId": "57e264c667f3560056c3cb1e"
  },
```

而如果想在查询 `Product` 表时，同时获取到 `_User` 表的其它字段信息呢？这样的话，就需要用到 `include` 关键字。

请看示例，通过如下代码实现查询过程：

```java
    AVQuery<AVObject> avQuery = new AVQuery<>("Product");
    avQuery.orderByDescending("createdAt");
    avQuery.include("owner");
    avQuery.findInBackground(new FindCallback<AVObject>() {
      @Override
      public void done(List<AVObject> list, AVException e) {
        if (e == null) {
          mList.addAll(list);
          mRecyclerAdapter.notifyDataSetChanged();
        } else {
          e.printStackTrace();
        }
      }
    });
```
最后，退出登录，可以使用如下代码：

```java
AVUser.getCurrentUser().logOut();
```

##  更进一步

如果你之后，在存储模块的开发过程中，遇到任何问题，请直接查阅以下文档的相关部分：{{link_to_storage_guide_doc}}。