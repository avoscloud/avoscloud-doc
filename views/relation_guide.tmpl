{% set appid = '{{appid}}' %}
{% set appkey = '{{appkey}}' %}
{% set masterkey = '{{masterkey}}' %}

# {{platform}} 数据库设计指南

数据对象之间存在 3 种类型的关系。一对一关系将一个对象与另一个对象关联，一对多关系是一个对象关联多个对象，多对多关系则用来实现大量对象之间的复杂关系。我们支持 4 种方式来构建对象之间的关系：

1. Pointers（适合一对一、一对多关系）
2. Arrays（一对多、多对多）
3. AVRelation（多对多）
4. 关联表（多对多）

## 一对多关系

在创建一对多关系时，选择用 Pointers 还是 Arrays 来实现，需要考虑关系中包含的对象数量。如果关系「多」方包含的对象数量非常大（大于 100 左右），那么就必须使用 Pointers。反之，如果对象数量很小（低于 100 或更少），那么 Arrays 可能会更方便，特别是在获取父对象的同时得到所有相关的对象，即一对多关系中的「多」。

### 使用 Pointers 实现一对多关系

#### Pointers 存储

中国的「省份」与「城市」具有典型的一对多的关系。深圳和广州（城市）都属于广东省（省份），而朝阳区和海淀区（行政区）只能属于北京市（直辖市）。广东省对应着多个一级行政城市，北京对应着多个行政区。下面我们使用 Pointers 来存储这种一对多的关系。

<div class="callout callout-info">注：为了表述方便，后文中提及城市都泛指一级行政市以及直辖市行政区，而省份也包含了北京、上海等直辖市。</div>

{% block code_city_point_to_province %}{% endblock %}

注意：保存关联对象的同时，被关联的对象也会随之被保存到云端。

要关联一个已经存在于云端的对象，例如将「东莞市」添加至「广东省」，方法如下：

{% block code_city_point_to_province_with_objectId %}{% endblock %}

执行上述代码后，在应用控制台可以看到 `dependent` 字段显示为 Pointer 数据类型，而它本质上存储的是一个指向 `City` 这张表的某个 AVObject 的指针。

#### Pointers 查询

假如已知一个城市，想知道它的上一级的省份：

{% block code_fetch_province_by_city %}{% endblock %}

假如查询结果中包含了城市，并想通过一次查询同时把对应的省份也一并加载到本地：

{% block code_query_province_by_city %}{% endblock %}

假如已知一个省份，要找出它的所有下辖城市：

{% block code_query_city_by_province %}{% endblock %}

大多数场景下，Pointers 是实现一对多关系的最好选择。

### 使用 Arrays 实现一对多关系

#### Arrays 存储

当一对多关系中所包含的对象数量很少时，使用 Arrays 比较理想。Arrays 可以通过 `{{ops_include}}` 简化查询。传递对应的 key 可以在获取「一」方对象数据的同时获取到所有「多」方对象的数据。但是如果关系中包含的对象数量巨大，查询将响应缓慢。

城市与省份对应关系也可以使用 Arrays 实现。我们重新建立对象，为 `Province` 表添加一列 `cityList` 来保存城市数组：

{% block code_save_cityList_array %}{% endblock %}

#### Arrays 查询

获取这些 `City` 对象：

{% block code_get_cityList_array %}{% endblock %}

如果要在查询某一个省份的时候，顺便把所有下辖的城市也获取到本地，可以在构建查询的时候使用 `{{ops_include}}` 操作，这样就可以通过一次查询同时获取 `cityList` 列中存放的 `City` 对象集合：

{% block code_query_province_include_cityList %}{% endblock %}

我们同样也可以根据已知的城市来查询它所属的上级省份，例如找出南京所属的省份：

{% block code_query_province_by_city_with_containsIn %}{% endblock %}

## 多对多关系

假设有一款读书应用，我们需要为 `Book` 对象和 `Author` 对象建模。一个作者可以写多本书，一本书也可以有多个作者，这是一个典型的多对多关系。我们必须使用 Arrays、Relation 或创建自己的关联表来实现这种关系。决策的关键在于**是否需要为这个关系附加一些属性**。

如果不需要附加属性，使用 Relation 或 Arrays 最为简单。通常情况下，使用 Arrays 可以使用更少的查询并获得更好的性能。如果多对多关系中任何一方对象数量可能达到或超过 100，使用 Relation 或关联表是更好的选择。

反之，若需要为关系附加一些属性，就创建一个独立的表（关联表）来存储两端的关系。记住，附加的属性是描述这个关系的，不是描述关系中的任何一方。所附加的属性可以是：

* 关系创建的时间
* 关系创建者
* 某人查看此关系的次数

### 使用 Relation 实现多对多关系

#### Relation 的存储

一个学生可以学习「多」门课程，一门课程也可以拥有「多」个学生。我们可以使用 Relation 构建 `Student` 和 `Course` 之间的关系。

为一个学生选择多门课程：

{% block code_save_student_related_to_course_with_relation %}{% endblock %}

#### Relation 的查询

要获取某个课程的所有学生，使用如下查询即可：

{% block code_query_students_by_course %}{% endblock %}

要获取某个学生学习的所有的课程，你可以构造一个稍微不同的查询来获取这种反向关系的结果：

{% block code_query_courses_by_student %}{% endblock %}

### 使用关联表实现多对多关系

有时我们需要知道更多关系的附加信息，比如在一个学生选课系统中，我们要了解学生打算选修的这门课的课时有多长，或者学生选修是通过手机选修还是通过网站操作的，这个时候单独使用 `AVRelation` 就无法满足需求了，因为 `AVRelation` 不支持额外的自定义属性，此时我们可以使用传统的数据库设计方法：关联表。

为此，我们创建一个独立的表 `StudentCourseMap` 来保存 `Student` 和 `Course` 的关系：

字段|类型|说明
---|---|---
`course`|Pointer|Course 指针实例
`student`|Pointer|Student 指针实例
`duration`|Array|所选课程的开始和结束时间点，如 `["2016-02-19","2016-04-21"]`。
`platform`|String|操作时使用的设备，如 `iOS`。

如此，实现选修功能的代码如下：

{% block code_save_relationTable_student_with_course %}{% endblock %}

查询选修了某一课程的所有学生：

{% block code_query_relationTable_students_in_course %}{% endblock %}

同样我们也可以很简单地查询某一个学生选修的所有课程，只需将上述代码变换查询条件即可：

{% block code_query_relationTable_courses_by_student %}{% endblock %}

### 使用 Arrays 实现多对多关系

使用 Arrays 实现多对多关系，跟实现一对多关系大致相同。关系中一方的所有对象拥有一个数组列来包含关系另一方的一些对象。

以选课系统为例，现在我们使用 Arrays 方式来实现学生选课的操作：

{% block code_save_courses_using_arrays %}{% endblock %}

当查询某一个学生选修的所有课程时，需要使用 `{{ops_include}}` 操作来获取对应的数组值：

{% block code_query_courses_by_include %}{% endblock %}

查找选修了某一个课程的所有学生：

{% block code_query_using_array_contains %}{% endblock %}

## 一对一关系

当你需要将一个对象拆分成两个对象时，一对一关系是一种重要的需求。这种需求应该很少见，但是在下面的实例中体现了这样的需求：

* **限制部分用户数据的权限**<br/>
  在这个场景中，你可以将此对象拆分成两部分，一部分包含所有用户可见的数据，另一部分包含所有仅自己可见的数据（通过 [ACL 控制](data_security.html#Class_级别的_ACL) ）。同样你也可以实现一部分包含所有用户可修改的数据，另一部分包含所有仅自己可修改的数据。
* **避免大对象**<br/>
  原始对象大小超过了对象的 128 KB 的上限值，此时你可以创建另一个对象来存储额外的数据。当然通常的作法是更好地设计和优化数据模型来避免出现大对象，但如果确实无法避免，则可以考虑使用 AVFile 存储大数据。
* **更灵活的文件对象**<br/>
  AVFile 可以方便地存取文件，但对对象进行查询和修改等操作就不是很方便了。此时可以使用 AVObject 构造一个自己的文件对象并与 AVFile 建立一对一关联，将文件属性存于 AVObject 中，这样既可以方便查询修改文件属性，也可以方便存取文件。
  
## 关联数据的删除
当表中有一个 Pointer 或 Relation 指向的源数据被删除时，这个源数据对应的 Pointer 和 Relation **不会**被自动删除。所以建议用户在删除源数据时自行检查是否有 Pointer 或 Relation 指向这条数据，基于业务场景有必要做数据清理的话，可以调用对应的对象上的删除接口将 Pointer 或 Relation 关联的对象删除。