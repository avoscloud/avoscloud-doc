{% import "views/_helper.njk" as docs %}

# {{platform_name}} SDK 安装指南

{% if platform_name === "Android" %}
## SDK 维护期说明

我们于 2018 年 9 月推出了新的 [Java Unified SDK](https://leancloudblog.com/java-unified-sdk-kai-fang-ce-shi-tong-zhi/)，兼容纯 Java、云引擎和 Android 等多个平台，老的 Android SDK（所有 `groupId` 为 `cn.leancloud.android` 的 libraries，即下文介绍的 SDK）进入维护状态，直到 2019 年 9 月底停止维护。欢迎大家切换到新的 Unified SDK，具体使用方法详见 [数据存储开发指南 · Java](leanstorage_guide-java.html)。
{% endif %}
{% if platform_name === "Android / Java" %}
## 平台与 SDK 对应关系
LeanCloud Java SDK 主要包含以下几个 library，其层次结构以及平台对应关系如下：

### 基础包（可以在纯 Java 环境下调用）
- storage-core：包含所有数据存储的功能，如
  - 结构化数据（AVObject）
  - 内建账户系统（AVUser）
  - 查询（AVQuery）
  - 文件存储（AVFile）
  - 社交关系（AVFriendship，当前版本暂不提供）
  - 朋友圈（AVStatus，当前版本暂不提供）
  - 短信（AVSMS）
  - 等等
- realtime-core：部分依赖 storage-core library，实现了 LiveQuery 以及即时通讯功能，如：
  - LiveQuery
  - AVIMClient
  - AVIMConversation 以及多种场景对话
  - AVIMMessage 以及多种子类化的多媒体消息
  - 等等

### Android 特有的包
- storage-android：是 storage-core 在 Android 平台的定制化实现，接口与 storage-core 完全相同。
- realtime-android：是 realtime-core 在 Android 平台的定制化实现，并且增加 Android 推送相关接口。
- mixpush-android：是 LeanCloud 混合推送的 library，支持华为、小米、魅族、vivo 以及 oppo 的官方推送。
- leancloud-fcm：是 Firebase Cloud Messaging 的封装 library，供美国节点的 app 使用推送服务。


### 模块依赖关系
Java SDK 一共包含如下几个模块：

目录 | 模块名 | 适用平台 | 依赖关系
---|---|---|---
./core | storage-core，存储核心 library | java | 无，它是 LeanCloud 最核心的 library
./realtime | realtime-core，LiveQuery 与实时通讯核心 library | java | storage-core
./android-sdk/storage-android | storage-android，Android 存储 library | Android | storage-core
./android-sdk/realtime-android | realtime-android，Android 推送、LiveQuery、即时通讯 library | Android | storage-android, realtime-core
./android-sdk/mixpush-android | Android 混合推送 library | Android | realtime-android
./android-sdk/leancloud-fcm | Firebase Cloud Messaging library | Android | realtime-android

{% endif %}
## 获取 SDK

{% if platform_name === "Objective-C" or platform_name === "Swift" or platform_name === "Android" or platform_name === "Python" or platform_name === "PHP" or platform_name === "Android / Java" %}
获取 SDK 有多种方式，较为推荐的方式是通过包依赖管理工具下载最新版本。

### 包依赖管理工具安装

{% if platform_name === "Objective-C" %}
通过 [CocoaPods](http://www.cocoapods.org) 安装可以最大化地简化安装过程。

首先，在项目根目录下的 `Podfile` 文件中添加以下 pods：

```ruby
pod 'AVOSCloud'   # 数据存储、短信、社交、云引擎调用等基础服务模块
pod 'AVOSCloudIM' # 即时通讯模块
```

如需使用 [LiveQuery](leanstorage_guide-js.html#livequery)，还需添加以下 pod：

```ruby
pod 'AVOSCloudLiveQuery'
```

{% call docs.noteWrap() %}
从 v3.4.0 开始，不再根据平台区分 pod 名称。同一个模块在所有平台上的 pod 名称相同。CocoaPods 会根据 `Podfile` 中的 `platform` 信息安装相应的源文件。带有平台后缀的旧的 pod，例如 `AVOSCloud-watchOS`、`AVOSCloudIM-OSX` 等不再更新。如果要更新到 v3.4.0 及以后的版本，请将 pod 的平台后缀去掉。
{% endcall %}

然后在项目根目录执行 `pod install` 命令，执行成功后，SDK 就集成到项目中了。
{% endif %}
{% if platform_name === "Swift" %}
[CocoaPods](https://cocoapods.org) 是开发 macOS 和 iOS 应用程序的一个第三方库的依赖管理工具，通过它可以定义自己的依赖关系（称作 pods），并且随着时间的推移，它会让整个开发环境中对第三方库的版本管理变得非常方便。具体可以参考 [Using CocoaPods](https://guides.cocoapods.org/using/index.html)。

首先确保开发环境中已经安装了 Ruby（macOS 系统自带 Ruby，建议安装 Xcode，Xcode 附带的 Ruby 版本较新），然后执行以下命令安装 cocoapods：

```sh
$ sudo gem install cocoapods
```

如果遇到网络问题无法从国外主站上直接下载，我们推荐一个国内的镜像：[RubyGems 镜像](https://gems.ruby-china.com/)。

在项目根目录下创建一个名为 `Podfile` 的文件（无扩展名），并添加以下内容：

```ruby
target 'YOUR_APP_TARGET' do # 替换 YOUR_APP_TARGET 为你的应用名称。
    use_frameworks!
    inhibit_all_warnings!

    pod 'LeanCloud', '~> SDK_VERSION' # 一般替换 SDK_VERSION 为最新版本的号码，最新版可以在 https://github.com/leancloud/swift-sdk/releases 查看到。
end
```

执行以下命令中的任意一条来集成 SDK：

```sh
$ pod update
```

或者

```sh
$ pod install --repo-update
```

它们的区别详见 [官方文档](https://guides.cocoapods.org/using/pod-install-vs-update.html)。

集成 SDK 成功后，使用项目根目录下 **`<项目名称>.xcworkspace`** 来打开项目。
{% endif %}
{% if platform_name === "Android" %}
#### Gradle

Gradle 是 Google 官方推荐的构建 Android 程序的工具，使用 Android Studio 进行开发的时候，它会自动在新建的项目中包含一个自带的命令行工具 **gradlew**。我们推荐开发者使用这个自带的命令行工具，这是因为 Gradle 存在版本兼容的问题，很多开发者即使正确配置了 Gradle 脚本，但由于使用了最新版本或不兼容的 Gradle 版本而仍然无法成功加载依赖包。

##### Android Studio

使用 Android Studio 创建一个新的项目的时候，它的目录结构如下：

```
.
├── app                 // 应用源代码
    ├── ...
    ├── build.gradle    // 应用 Gradle 构建脚本
    ├── ...
├── build.gradle        // 项目 Gradle 构建脚本
├── YOUR-APP-NAME.iml   // YOUR-APP-NAME 为你的应用名称
├── gradle
└── settings.gradle
```

首先打开 `app` 目录下的 `build.gradle` 进行如下配置：

```
android {
    // 为了解决部分第三方库重复打包了META-INF的问题
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile ('com.android.support:support-v4:21.0.3')

    // LeanCloud 基础包
    compile ('cn.leancloud.android:avoscloud-sdk:{{ version.leancloud }}')

    // 推送与即时通讯需要的包
    compile ('cn.leancloud.android:avoscloud-push:{{ version.leancloud }}@aar'){transitive = true}

    // Android 混合推送需要的包
    compile ('cn.leancloud.android:avoscloud-mixpush:{{ version.leancloud }}@aar'){transitive = true}

    // LeanCloud 用户反馈包
    compile ('cn.leancloud.android:avoscloud-feedback:{{ version.leancloud }}@aar')

    // LeanCloud 应用内搜索包
    compile ('cn.leancloud.android:avoscloud-search:{{ version.leancloud }}@aar')
}
```

从 4.7.8 版本开始，我们已经把 SDK library 推送到了 maven central repository，推荐大家使用这种方式。

#### Eclipse

Eclipse 用户首先 [下载 SDK](sdk_down.html)，然后按照 [手动安装步骤](#手动安装) 将 SDK 导入到项目里。
{% endif %}
{% if platform_name === "Python" %}
pip 是最推荐的 Python 包管理工具，它是 `easy_install` 的替代。安装 `leancloud-sdk` 只需执行以下命令：

```sh
pip install leancloud
```

也可以使用 `easy_install` 进行安装：

```sh
easy_install leancloud
```

根据你的环境，命令之前还可能需要加上 `sudo`。
{% endif %}
{% if platform_name === "PHP" %}
#### composer

composer 是推荐的 PHP 包管理工具。安装 `leancloud-sdk` 只需执行以下命令：

```sh
composer require leancloud/leancloud-sdk
```

注意：

- `leancloud-sdk` 依赖 PHP 的 curl 扩展（常见 Linux 系统下一般需要安装 `php-curl` 这个包）。
- 如果 composer 访问 packagist 仓库有问题，需要 [设置镜像](https://mirrors.aliyun.com/composer/) 或者通过代理（设置 `http_proxy` 环境变量）访问。
{% endif %}
{% if platform_name === "Android / Java" %}
可以用以下任意包管理工具来安装 SDK。
#### 使用存储功能
Maven：

```xml
<dependency>
    <groupId>cn.leancloud</groupId>
    <artifactId>storage-core</artifactId>
    <version>{{ version.unified }}</version>
</dependency>
```

Ivy：

```xml
<dependency org="cn.leancloud" name="storage-core" rev="{{ version.unified }}" />
```

SBT：

```sbt
libraryDependencies += "cn.leancloud" %% "storage-core" % "{{ version.unified }}"
```

Gradle：

```groovy
implementation 'cn.leancloud:storage-core:{{ version.unified }}'
```

如果是 Android 项目，则换成以下这些包：

```groovy
implementation ('cn.leancloud:storage-android:{{ version.unified }}'){
    exclude group: 'com.alibaba', module: 'fastjson'
    exclude group: 'org.ligboy.retrofit2', module: 'converter-fastjson'
}
implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
implementation 'com.alibaba:fastjson:1.1.70.android'
implementation 'org.ligboy.retrofit2:converter-fastjson-android:2.1.0'
```
#### 使用即时通讯 / 推送服务
Example for Maven：

```
<dependency>
    <groupId>cn.leancloud</groupId>
    <artifactId>realtime-core</artifactId>
    <version>{{ version.unified }}</version>
</dependency>
```

and for Ivy:
```
<dependency org="cn.leancloud" name="realtime-core" rev="{{ version.unified }}" />
```

and for SBT:
```
libraryDependencies += "cn.leancloud" %% "realtime-core" % "{{ version.unified }}"
```

and for Gradle:
```
    implementation('cn.leancloud:realtime-android:{{ version.unified }}') {
        exclude group: 'com.alibaba', module: 'fastjson'
        exclude group: 'org.ligboy.retrofit2', module: 'converter-fastjson'
    }
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'com.alibaba:fastjson:1.1.70.android'
    implementation "org.ligboy.retrofit2:converter-fastjson-android:2.1.0"
```

#### 使用混合推送服务

Example for Gradle：
```
implementation('cn.leancloud:mixpush-android:{{ version.unified }}') {
    exclude group: 'com.alibaba', module: 'fastjson'
    exclude group: 'org.ligboy.retrofit2', module: 'converter-fastjson'
}
implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
implementation 'com.alibaba:fastjson:1.1.70.android'
implementation "org.ligboy.retrofit2:converter-fastjson-android:2.1.0"
```
{% endif %}

### 手动安装

<a class="btn btn-default" target="_blank" href="sdk_down.html">下载 SDK</a>
{% if platform_name === "Android / Java" %}
#### 从源码编译

可以执行以下命令获取 Java SDK 并安装：
```
$ git clone https://github.com/leancloud/java-unified-sdk.git
$ cd java-unified-sdk/
$ mvn clean install
```
获取和安装 Android SDK：
```
$ cd java-unified-sdk/
$ cd android-sdk/
$ gradle clean assemble
```
{% endif %}

{% if platform_name === "Objective-C" %}
#### 下载源码

首先将 SDK 仓库 clone 到项目根目录：

```sh
git clone "https://github.com/leancloud/objc-sdk.git" leancloud-objc-sdk
```

然后 checkout 版本。SDK 的版本号是通过 tag 标记的，可以使用以下命令 checkout 最新版本：

```sh
cd leancloud-objc-sdk
git checkout $(git describe --tags $(git rev-list --tags --max-count=1))
```

#### 集成 SDK

将 SDK 集成到到项目中有以下两种方式，**任选一种即可**：

- 将 SDK 的 `xcodeproj` 文件直接添加到项目中。
- 将 SDK 编译成 framework 再添加到项目中。

##### 集成 `xcodeproj`

将 `AVOS`/`AVOS.xcodeproj` 项目文件拖入项目，作为 subproject：

![「AVOS.xcodeproj」会出现在项目根目录下。](images/quick_start/ios/subproject.png)

接着为该项目设置 Build Phases，在 **Link Binary With Libraries** 下面添加如下内容：

![「Workspace」中的「AVOSCloud.framework from 'AVOSCloud-iOS' target in 'AVOS' project」和「AVOSCloudIM.framework from 'AVOSCloudIM-iOS' target in 'AVOS' project」。](images/quick_start/ios/link-binary.png)

上图选择了支持 iOS 平台的 `AVOSCloud` 与 `AVOSCloudIM` 两个 frameworks 用来举例。请根据实际需要来选择支持的平台以及要使用的模块。

#### 添加系统依赖

然后添加 SDK 依赖的系统 framework 和 library：

  * `libz`
  * `libc++`
  * `libicucore`
  * `libsqlite3`
  * `SystemConfiguration.framework`
  * `MobileCoreServices.framework`
  * `CoreTelephony.framework`
  * `CoreLocation.framework`

就像下面这样：

![上面列出的这些 framework 和 library 出现在「Link Binary With Libraries」里面。](images/quick_start/ios/system-dependency.png)

最后在 **Other Linker Flags** 中添加 `-ObjC`。

这样就集成完毕了。
{% endif %}
{% if platform_name === "Android" %}
对照以下包文件及其对应的功能模块，开发者可以自行 [编译源代码](https://github.com/leancloud/android-sdk-all/blob/master/README.md#%E7%BC%96%E8%AF%91) 来得到所需的包文件。

```
├── avoscloud-feedback-{{ version.leancloud }}.zip // LeanCloud 用户反馈模块
├── avoscloud-push-{{ version.leancloud }}.jar     // LeanCloud 推送模块和即时通讯模块
├── avoscloud-sdk-{{ version.leancloud }}.jar      // LeanCloud 基本存储模块
├── avoscloud-search-{{ version.leancloud }}.zip   // LeanCloud 应用内搜索模块
├── fastjson-{{ version.fastjson }}.jar            // LeanCloud 基本存储模块
├── protobuf-java-3.4.0.jar                        // LeanCloud 推送模块和即时通讯模块
├── okhttp-{{ version.okhttp }}.jar                // LeanCloud 基本存储模块
├── okio-{{ version.okio }}.jar                    // LeanCloud 基本存储模块
```

#### LeanCloud 基本存储模块

* `avoscloud-{{ version.leancloud }}.jar`
* `okhttp-{{ version.okhttp }}.jar`
* `okio-{{ version.okio }}.jar`
* `fastjson-{{ version.fastjson }}.jar`

#### LeanCloud 推送模块和即时通讯模块

* LeanCloud 基础存储模块
* `avoscloud-push-{{ version.leancloud }}.jar`
* `avoscloud-mixpush-{{ version.leancloud }}.jar`
* `protobuf-java-3.4.0.jar`

我们提供的下载包里包含了必须的依赖库，自己下载官方库也可以，不过请确保版本一致。

**注意：如果需要使用美国站点，并且 SDK 版本是 3.3 及以上，则不需要引入 SSL 证书。其他低版本的用户，需要下载 [SSL 证书](https://download.leancloud.cn/sdk/android/current/avoscloud_us_ssl.bks)，将其拷贝到项目的 `res/raw/` 之下。**

#### Android Studio

首先本地已经下载好了项目需要的 SDK 包，然后按照以下步骤导入：

1. 打开 **File** > **Project Structure** > **Modules** 对话框，点击 **Dependencies**；
2. 点击下方的 **+**（加号），选择要导入的 SDK 包（xxxx.jar），记得 **Scope** 选为 **Compile**；
3. 重复第 2 步，直到所有需要的包均已正确导入。

Eclipse 的导入与一般的 jar 导入无本质区别，因此不再赘述。
{% endif %}
{% endif %}
{% if platform_name === "JavaScript" %}
本指南按照应用的适用平台来介绍各自的安装与集成方式。

|[<img src="images/platforms/html5.svg" width="120"/>](#Web)|[<img src="images/platforms/node-js.svg" width="120"/>](#Node.js)|[<img src="images/platforms/weapp.svg" width="120"/>](#微信小程序)|[<img src="images/platforms/weapp-game.svg" width="120"/>](#微信小游戏)|[<img src="images/platforms/cocos.png" width="120"/>](#CocosCreator)|[<img src="images/platforms/laya.png" width="120"/>](#LayaAir)|[<img src="images/platforms/egret.png" width="120"/>](#Egret（白鹭引擎）)|[<img src="images/platforms/react-native.svg" width="120"/>](#React-Native)|[<img src="images/platforms/electron.svg" width="120"/>](#Electron)|
|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|
|Web|Node.js|微信小程序|微信小游戏|CocosCreator|LayaAir|Egret|React Native|Electron|

### Web

<a id="web" name="web"></a>适用于运行在浏览器、WebView 或其他应用内 HTML 平台上的应用。

#### 安装与引用 SDK

##### npm

如果你的 Web 应用使用了 webpack 等前端打包工具，我们推荐使用包管理工具 npm 安装 SDK：

```bash
# 存储服务（包括推送）
$ npm install leancloud-storage --save
# 即时通讯服务
$ npm install leancloud-realtime --save
```

如果因为网络原因无法通过官方的 npm 站点下载，推荐通过 taobao 镜像来下载，操作步骤如下：

```bash
# 存储服务（包括推送）
$ npm install leancloud-storage --save --registry=https://registry.npm.taobao.org
# 即时通讯服务
$ npm install leancloud-realtime --save --registry=https://registry.npm.taobao.org
```

然后在代码中通过 `require` 获得 SDK 的引用：

```js
// 存储服务
var AV = require('leancloud-storage');
var { Query, User } = AV;
// 即时通讯服务
var { Realtime, TextMessage } = require('leancloud-realtime');
```

如果需要使用存储服务的 [LiveQuery](leanstorage_guide-js.html#livequery) 功能，需要按如下做法引入存储 SDK：

```js
var AV = require('leancloud-storage/live-query');
// 有了这一行，无需另外 require('leancloud-storage')
```

##### CDN

你也可以直接在页面中通过 `script` 标签引入我们的 SDK：

```html
<!-- 存储服务 -->
<script src="//cdn.jsdelivr.net/npm/leancloud-storage@{{jssdkversion}}/dist/av-min.js"></script>
<!-- 即时通讯服务 -->
<script src="//cdn.jsdelivr.net/npm/leancloud-realtime@{{jsimsdkversion}}/dist/realtime.browser.min.js"></script>
```

如果需要使用存储服务的 [LiveQuery](leanstorage_guide-js.html#livequery) 功能，需要按如下做法引入存储 SDK：

```html
<script src="//cdn.jsdelivr.net/npm/leancloud-storage@{{jssdkversion}}/dist/av-live-query-min.js"></script>
<!-- 有了这一行，无需另外引入 av-min.js -->
```

通过这种方式引入的 SDK 可以通过全局变量 `AV` 获得引用：

```js
// 存储服务
var { Query, User } = AV;
AV.init({
  appId: "{{appid}}",
  appKey: "{{appkey}}",
  serverURLs: "https://xxx.example.com",
});
// 即时通讯服务
var { Realtime, TextMessage } = AV;
```

### Node.js

<a id="node" name="node"></a>JavaScript SDK 也可以运行在 Node.js 运行环境中。如果希望在云引擎中访问我们的存储服务，请参照 [云引擎快速入门](leanengine_quickstart.html)，使用模板项目中提供的 `leanengine` 包接入存储服务。

注意，云引擎内部访问 API 是通过内网，所以不需要也不应该配置 API 自定义域名。
模板项目和[云引擎网站托管开发指南](leanengine_webhosting_guide-node.html)中的示例代码均未配置 API 自定义域名，
请勿多此一举设置 serverURLs，否则会变成公网访问，影响性能。
在使用命令行工具（`lean up`）本地调试云引擎托管项目时，虽然是公网访问，但命令行工具会自动设置相应的环境变量，供 SDK 访问 API，所以也不需要设置 serverURLs。

在自己的服务器上使用 Node.js SDK，包括在自己的服务器上通过 Node.js SDK 调用云函数，需要在初始化 SDK 时配置 API 自定义域名。

#### 安装与引用 SDK

Node.js 中 SDK 的安装与引用也是通过包管理工具 npm，请参考 [npm](#npm)。

### 微信小程序

#### 手动导入文件

##### 存储服务

<a id="weapp" name="weapp"></a>前往 [存储 SDK 下载页](https://releases.leanapp.cn/#/leancloud/javascript-sdk/releases)，下载最新版本的 `av-weapp-min.js`，移动到 `libs` 目录。如果需要使用 [LiveQuery](leanstorage_guide-js.html#livequery) 功能，需要下载 `av-live-query-weapp-min.js`。

在 `app.js` 中使用 `const AV = require('./libs/av-weapp-min.js');` 获得 `AV` 的引用。在其他文件中使用时请将路径替换成对应的相对路径。 

##### 即时通讯服务

前往 [即时通讯 SDK 下载页](https://releases.leanapp.cn/#/leancloud/js-realtime-sdk/releases)，下载最新版本的 `realtime.weapp.min.js`，移动到 `libs` 目录。

在 `app.js` 中使用 `const { Realtime, TextMessage } = require('./libs/realtime.weapp.min.js');` 获得 `Realtime` 等 SDK 暴露成员的引用。在其他文件中使用时请将路径替换成对应的相对路径。

#### WePY

如果使用 [WePY](https://tencent.github.io/wepy/) 来开发小程序，可以直接通过 npm 安装和引用 SDK，具体操作步骤请参考 [npm](#npm)。

#### mpvue

如果使用 [mpvue](http://mpvue.com/) 来开发小程序，可以直接通过 npm 安装和引用 SDK，具体操作步骤请参考 [npm](#npm)。

#### Taro

如果使用 [Taro](https://taro.jd.com/) 来开发小程序，通过 npm 安装 SDK 后，需要从指定路径引入小程序 SDK：

```js
import AV from 'leancloud-storage/dist/av-weapp.js';
```

如果使用 TypeScript 开发，可以手动把 `leancloud-storage/storage.d.ts` 复制到 `leancloud-storage/dist/av-live-query-weapp.d.ts`。

### 微信小游戏

<a id="weapp-game" name="weapp-game"></a>微信小游戏手动导入 SDK 的步骤与微信小程序一致，请参考 [微信小程序 · 手动导入文件](#手动导入文件)。

如果使用游戏引擎提供的开发工具开发微信小游戏，请参照对应的游戏引擎章节。

### CocosCreator

<a id="cocoscreator" name="cocoscreator"></a>CocosCreator 支持直接通过 npm 安装与引用 SDK，具体操作步骤请参考 [npm](#npm)。

{{ docs.note("CocosCreator 项目默认没有 `package.json` 文件，可以在安装 SDK 前通过 `npm init -y` 命令创建。") }}

如果你的 CocosCreator 项目需要发布为微信小游戏，需要在构建发布到小游戏之前修改 SDK 的引用路径：

```diff
  // 存储服务 SDK 路径变更为
- var AV = require('leancloud-storage');
+ var AV = require('leancloud-storage/dist/av-weapp-min.js');
  
  // 带 LiveQuery 功能的存储 SDK 路径变更为
- var AV = require('leancloud-storage/live-query');
+ var AV = require('leancloud-storage/dist/av-live-query-weapp-min.js');

  // 即时通讯服务 SDK 路径变更为
- var { Realtime } = require('leancloud-realtime');
+ var { Realtime } = require('leancloud-realtime/dist/realtime.weapp.js');
```

请注意，此改动会导致其他平台的产出（包括浏览器与模拟器的预览功能）不能正常工作，因此应该只在构建发布到小游戏之前临时修改，并在发布之后修改回来。

在改动之后，CocosCreator 的控制台可能会出现 load script error，但不影响构建发布小游戏，并且构建产出在小游戏开发工具中运行也不会有异常。

### LayaAir

<a id="layaair" name="layaair"></a>LayaAir 支持直接通过 npm 安装与引用 SDK，具体操作步骤请参考 [npm](#npm)。

{{ docs.note("LayaAir 项目默认没有 `package.json` 文件，可以在安装 SDK 前通过 `npm init -y` 命令创建。") }}

如果你的 LayaAir 项目需要发布为微信小游戏，需要在构建发布到小游戏之前修改 SDK 的引用路径：

```diff
  // 存储服务 SDK  路径变更为
- import AV from 'leancloud-storage';
+ import AV from 'leancloud-storage/dist/av-weapp-min.js';
  
  // 带 LiveQuery 功能的存储 SDK 路径变更为
- import AV from 'leancloud-storage/live-query';
+ import AV from 'leancloud-storage/dist/av-live-query-weapp-min.js';

  // 即时通讯服务 SDK 路径变更为
- import { Realtime } from 'leancloud-realtime';
+ import { Realtime } from 'leancloud-realtime/dist/realtime.weapp.js';
```

请注意，此改动会导致其他平台的产出（包括浏览器与模拟器的预览功能）不能正常工作，因此应该只在构建发布到小游戏之前临时修改，并在发布之后修改回来。

### Egret（白鹭引擎）

<a id="egret" name="egret"></a>首先前往 <https://github.com/leancloud/egret-sdk>，下载对应的 SDK 目录（leancloud-storage），将其放置于你的 Egret 游戏项目同级目录下：

```
├── egret-game-project
│   ├── （其他目录与文件）
│   └── egretProperties.json
└── leancloud-storage
    ├── leancloud-storage.d.ts
    ├── leancloud-storage.js
    └── leancloud-storage.min.js
```

然后，编辑 `egret-game-project/egretProperties.json` 文件，在 `modules` 数组的最后添加 SDK：

```diff
{
  "engineVersion": "5.1.8",
  "compilerVersion": "5.1.8",
  "template": {},
  "target": {"current": "web"},
  "eui": {"exmlRoot": ["resource/eui_skins"],"themes": ["resource/default.thm.json"],"exmlPublishPolicy": "commonjs"},
  "modules": [
    {
      "name": "egret"
    },
    {
      "name": "eui"
    },
    {
      "name": "assetsmanager"
    },
    {
      "name": "tween"
    },
    {
      "name": "promise"
+   },
+   {
+     "name": "leancloud-storage",
+     "path": "../leancloud-storage"
    }
  ]
}
```

最后，在 `egret-game-project` 目录下运行 `egret build`，如果在 `egret-game-project/manifest.json` 中的 `initials` 数组中出现了 `"libs/modules/leancloud-storage/leancloud-storage.js"` 则意味着 SDK 安装成功了。

安装成功后，你可以在业务代码中通过全局变量 `AV` 获得 SDK 的引用：

```js
var { Query, User } = AV;
AV.init({
  appId: "{{appid}}",
  appKey: "{{appkey}}",
  serverURLs: "https://xxx.example.com",
});
```

{{ docs.note("目前在 Egret 平台上，我们只提供存储服务的 SDK（不含 LiveQuery 功能）。") }} 

### React Native

<a id="react-native" name="react-native"></a>React Native 直接通过 npm 安装与引用 SDK，具体操作步骤请参考 [npm](#npm)。

### Electron

<a id="electron" name="electron"></a>Electron 使用包管理工具 npm 管理依赖，你可以通过以下命令安装 SDK：

```bash
# 存储服务（包括推送）
$ npm install leancloud-storage --save
# 即时通讯服务
$ npm install leancloud-realtime --save
```

#### 作为浏览器脚本引入

在 index.html 中可以通过 `script` 标签引入 SDK：

```html
<!-- 存储服务 -->
<script src="./node_modules/leancloud-storage/dist/av-min.js"></script>
<!-- 即时通讯服务 -->
<script src="./node_modules/leancloud-realtime/dist/realtime.browser.min.js"></script>
```

如果需要使用存储服务的 [LiveQuery](leanstorage_guide-js.html#livequery) 功能，需要按如下路径引入存储 SDK：

```html
<script src="./node_modules/leancloud-storage/dist/av-live-query-min.js"></script>
```

#### 作为 Node.js 模块引入

我们推荐使用 `script` 标签引入 SDK，该方式能满足绝大部分的需求。但是如果有以下的需求，SDK 也支持通过 `require('leancloud-storage')` 方法作为 Node.js 模块引入。

- 需要在 main process 中使用 SDK
- 需要使用 Node.js 的 `Buffer` 或 `Stream` 构造 `AV.File`

{{ docs.note("通过 Node.js `require` 方法引入的 SDK 与通过浏览器 `script` 标签引入的 SDK 是两个不同的 SDK，需要各自分别初始化，并且不能混用。") }}
{% endif %}
{% if platform_name === ".NET" %}
### Unity

- 支持 Unity 5.3+。
<!-- 等升级 Unity 即时通讯的文档后再增加这句话 -->
<!-- - 支持 .NET 4.x。SDK 在 .NET 3.x 版本下仅做 Bug 维护，不再增加新版本，请大家尽快升级到 4.x 版本。 -->

支持使用 Unity 开发的 iOS、Android、UWP、Windows Desktop，以及网页游戏。

#### 安装数据存储

请下载 [Unity Storage](https://releases.leanapp.cn/#/leancloud/unity-sdk/releases) 最新版本的 zip 包，解压之后导入到你的 Unity 项目中。

#### 安装即时通讯

请下载 [Unity Realtime](https://releases.leanapp.cn/#/leancloud/realtime-SDK-dotNET/releases) 最新版本的 zip 包，解压之后导入到你的 Unity 项目中。

#### 依赖详解

安装包解压之后，每一个依赖的详细说明如下：

名称|模块描述|必选
--|---|---
`AssemblyLister.dll`|LeanCloud 依赖检测模块，它负责检查相关依赖是否正确加载|是
`LeanCloud.Core.dll`|核心库，里面包含了 `AVObject` 和 `AVUser` 等所有内置类型的定义和序列化相关操作的功能|是
`LeanCloud.Storage.dll`|存储库，里面包含本地缓存以及 HTTP 请求发送的实现|是
`LeanCloud.Realtime.dll`|即时通讯库，里面包含了即时通讯协议的实现以及相关接口|否

### .NET Framework & Xamarin

.NET Framework 支持以下运行时：

- Classic Desktop 4.5+
- Windows 10
- UWP 4.5+
- .NET Core 2.0+

Xamarin 请确保你的项目至少满足如下版本需求：

- [Xamarin.Android 4.7+](https://developer.xamarin.com/releases/ios/xamarin.ios_6/xamarin.ios_6.3/)
- [Xamarin.iOS 6.3](https://developer.xamarin.com/releases/android/xamarin.android_4/xamarin.android_4.7/)

在 Visual Studio 执行安装 nuget 依赖：

```sh
# 安装存储，必选
PM> Install-Package LeanCloud.Storage
# 安装 LiveQuery，可选，如果需要实时数据同步功能则需要安装
PM> Install-Package LeanCloud.LiveQuery
# 安装即时通讯，可选，如果需要接入聊天则需要安装
PM> Install-Package LeanCloud.Realtime
```
{% endif %}

## 初始化

首先进入 [控制台 > 设置 > 应用 Key](/dashboard/app.html?appid={{appid}}#/key) 来获取 App ID 以及 App Key。

{% if platform_name === "Objective-C" %}
打开 `AppDelegate` 文件，导入基础模块：

```objc
#import <AVOSCloud/AVOSCloud.h>
```

然后粘贴下列代码到 `application:didFinishLaunchingWithOptions:` 方法中：

```objc
// 配置 SDK 储存
[AVOSCloud setServerURLString:@"https://xxx.example.com" forServiceModule:AVServiceModuleAPI];
// 配置 SDK 推送
[AVOSCloud setServerURLString:@"https://xxx.example.com" forServiceModule:AVServiceModulePush];
// 配置 SDK 云引擎
[AVOSCloud setServerURLString:@"https://xxx.example.com" forServiceModule:AVServiceModuleEngine];
// 配置 SDK 即时通讯
[AVOSCloud setServerURLString:@"https://xxx.example.com" forServiceModule:AVServiceModuleRTM];
// 配置 SDK 统计
[AVOSCloud setServerURLString:@"https://xxx.example.com" forServiceModule:AVServiceModuleStatistics];
// 初始化应用
[AVOSCloud setApplicationId:@"{{appid}}" clientKey:@"{{appkey}}"];
```

在 **v11.4.0 版本以前** 使用 **国际版** 需要增加以下代码：

```objc
[AVOSCloud setServiceRegion:AVServiceRegionUS];
```

在 **v11.4.0 版本及之后** 使用 **国际版** 无需增加上述代码，SDK 会自动判断 Region。

{{ docs.alert("在使用 SDK 的 API 时，请确保进行了 Application 的 ID、Key 以及 Region 的初始化。") }}
{% endif %}
{% if platform_name === "Swift" %}
打开 `AppDelegate.swift` 文件，添加下列导入语句到头部：

```swift
import LeanCloud
```

然后粘贴下列代码到 `application(_:didFinishLaunchingWithOptions:)` 函数内：

```swift
let configuration = LCApplication.Configuration(
    customizedServers: [
        .api("https://xxx.example.com"),
        .engine("https://xxx.example.com"),
        .push("https://xxx.example.com"),
        .rtm("https://xxx.example.com")
    ]
)
do {
    try LCApplication.default.set(
        id: "{{appid}}",
        key: "{{appkey}}",
        configuration: configuration
    )
} catch {
    fatalError("\(error)")
}
```
{% endif %}
{% if platform_name === "Android" %}
然后新建一个 Java Class，名字叫做 **MyLeanCloudApp**，让它继承自 **Application** 类，实例代码如下：

```java
public class MyLeanCloudApp extends Application {

    @Override
    public void onCreate() {
        super.onCreate();

        // 初始化参数依次为 this，App Id，App Key
        AVOSCloud.initialize(this,"{{appid}}","{{appkey}}");
    }
}
```
将上述代码中的 App ID 以及 App Key 替换成从控制台复制粘贴的对应的数据即可。

然后打开 `AndroidManifest.xml` 文件来配置 SDK 所需要的手机的访问权限以及声明刚才我们创建的 `MyLeanCloudApp` 类：

```xml
<!-- 基础模块（必须加入以下声明）START -->
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.READ_PHONE_STATE" />
<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
<!-- 基础模块 END -->

<application
  ...
  android:name=".MyLeanCloudApp" >

  <!-- 即时通讯模块、推送（均需要加入以下声明）START -->
  <!-- 即时通讯模块、推送都要使用 PushService -->
  <service android:name="com.avos.avoscloud.PushService"/>
  <receiver android:name="com.avos.avoscloud.AVBroadcastReceiver">
    <intent-filter>
      <action android:name="android.intent.action.BOOT_COMPLETED"/>
      <action android:name="android.intent.action.USER_PRESENT"/>
      <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
    </intent-filter>
  </receiver>
  <!-- 即时通讯模块、推送 END -->

  <!-- 反馈组件（需要加入以下声明）START -->
  <activity
     android:name="com.avos.avoscloud.feedback.ThreadActivity" >
  </activity>
  <!-- 反馈组件 END -->
</application>
```
{% endif %}
{% if platform_name === "JavaScript" %}
如果是在前端项目里面直接通过 CDN 加载的 LeanCloud JavaScript SDK，那么可以在页面加载的时候调用初始化的函数 `AV.init`：

```js
var APP_ID = '{{appid}}';
var APP_KEY = '{{appkey}}';

AV.init({
  appId: APP_ID,
  appKey: APP_KEY
});
```

如果是使用 npm 安装的 SDK，用法是一样的，但是注意需要通过 `require` 获得 SDK 的引用：

```js
var AV = require('leancloud-storage');
var { Realtime } = require('leancloud-realtime'); // 若不使用即时通讯服务，则无需引入

var APP_ID = '{{appid}}';
var APP_KEY = '{{appkey}}';

AV.init({
  appId: APP_ID,
  appKey: APP_KEY
});
```
{% endif %}
{% if platform_name === "Python" %}
然后导入 `leancloud`，并调用 `init` 方法进行初始化：

```python
import leancloud

leancloud.init("{{appid}}", "{{appkey}}")
# 或者使用 Master Key
# leancloud.init("{{appid}}", master_key="{{masterkey}}")
```
{% endif %}
{% if platform_name === "PHP" %}
然后导入 `Client`，并调用 `initialize` 方法进行初始化：

```php
use \LeanCloud\Client;
// 参数依次为 App ID、App Key、Master Key
Client::initialize("{{appid}}", "{{appkey}}", "{{masterkey}}");
{{host}} = "xxx.example.com" // 假定绑定的 API 自定义域名为 xxx.example.com
Client::setServerUrl("https://{{host}}"); // 0.7.0 及以上版本支持
```
{% endif %}
{% if platform_name === "Android / Java" %}
### Java 平台初始化代码

如果是一个普通 Java 项目，则在代码开头添加：

```java
import cn.leancloud.core.AVOSService;

// 配置 SDK 储存
AVOSCloud.setServer(AVOSService.API, "https://xxx.example.com");
// 配置 SDK 云引擎
AVOSCloud.setServer(AVOSService.ENGINE, "https://xxx.example.com");
// 配置 SDK 推送
AVOSCloud.setServer(AVOSService.PUSH, "https://xxx.example.com");
// 配置 SDK 即时通讯
AVOSCloud.setServer(AVOSService.RTM, "https://xxx.example.com");
AVOSCloud.initialize("{{appid}}", "{{appkey}}");
```

注意，云引擎内部访问 API 是通过内网，所以不需要也不应该配置 API 自定义域名。
模板项目和[云引擎网站托管开发指南](leanengine_webhosting_guide-java.html)中的示例代码均未配置 API 自定义域名，
请勿多此一举 setServer，否则会变成公网访问，影响性能。
在使用命令行工具（`lean up`）本地调试云引擎托管项目时，虽然是公网访问，但命令行工具会自动设置相应的环境变量，供 SDK 访问 API，所以也不需要 setServer。

在自己的服务器上通过 Java SDK 调用云函数，需要在初始化 SDK 时配置 API 自定义域名。

### Android 平台初始化

如果是一个 Android 项目，则向 `Application` 类的 `onCreate` 方法添加：

```java
import cn.leancloud.AVOSCloud;

public class MyLeanCloudApp extends Application {
    @Override
    public void onCreate() {
        super.onCreate();
        // 配置 SDK 储存
        AVOSCloud.setServer(AVOSService.API, "https://xxx.example.com");
        // 配置 SDK 云引擎
        AVOSCloud.setServer(AVOSService.ENGINE, "https://xxx.example.com");
        // 配置 SDK 推送
        AVOSCloud.setServer(AVOSService.PUSH, "https://xxx.example.com");
        // 配置 SDK 即时通讯
        AVOSCloud.setServer(AVOSService.RTM, "https://xxx.example.com"); 

        // 提供 this、App ID 和 App Key 作为参数
        // 注意这里千万不要调用 cn.leancloud.core.AVOSCloud 的 initialize 方法，否则会出现 NetworkOnMainThread 等错误。
        AVOSCloud.initialize(this, "{{appid}}", "{{appkey}}");
    }
}
```

然后指定 SDK 需要的权限并在 `AndroidManifest.xml` 里面声明 `MyLeanCloudApp` 类：

```xml
<!-- 基本模块（必须）START -->
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.READ_PHONE_STATE" />
<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
<!-- 基本模块 END -->

<application
  …
  android:name=".MyLeanCloudApp" >

  <!-- 即时通讯和推送 START -->
  <!-- 即时通讯和推送都需要 PushService -->
  <service android:name="cn.leancloud.push.PushService"/>
  <receiver android:name="cn.leancloud.push.AVBroadcastReceiver">
    <intent-filter>
      <action android:name="android.intent.action.BOOT_COMPLETED"/>
      <action android:name="android.intent.action.USER_PRESENT"/>
      <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
    </intent-filter>
  </receiver>
  <!-- 即时通讯和推送 END -->
</application>

```
{% endif %}
{% if platform_name === ".NET" %}
导入基础模块：

```cs
// 导入存储模块
using LeanCloud;
// 如果需要，导入聊天模块
using LeanCloud.Realtime;
```

### 数据存储初始化

在使用「数据存储」服务前，调用如下代码：

```cs
AVClient.Initialize("{{appid}}", "{{appkey}}");
```

### 即时通讯初始化

在使用「即时通讯」服务前，调用如下代码：

```cs
var realtime = new AVRealtime("{{appid}}", "{{appkey}}");
```
{% endif %}

## 开启调试日志

在应用开发阶段，你可以选择开启 SDK 的调试日志（debug log）来方便追踪问题。调试日志开启后，SDK 会把网络请求、错误消息等信息输出到 IDE 的日志窗口，或是浏览器 Console 或是 LeanCloud 控制台的 [云引擎日志](/dashboard/cloud.html?appid={{appid}}#/log) 中。

{% if platform_name === "Objective-C" %}
```objc
// 放在 SDK 初始化语句 [AVOSCloud setApplicationId:] 后面，只需要调用一次即可
[AVOSCloud setAllLogsEnabled:YES];
```
{% endif %}
{% if platform_name === "Swift" %}
```swift
// 放在 SDK 初始化语句 LCApplication.default.set 前面，只需要调用一次即可
LCApplication.logLevel = .all
```
{% endif %}
{% if platform_name === "Android" %}
```java
// 放在 SDK 初始化语句 AVOSCloud.initialize() 后面，只需要调用一次即可
AVOSCloud.setDebugLogEnabled(true);
```
{% endif %}
{% if platform_name === "JavaScript" %}
如果使用的是 Node.js，可以在通过 npm 启动应用时设置环境变量 `DEBUG=leancloud*`：

```sh
DEBUG=leancloud* npm start
```

若是在 [云引擎](leanengine_overview.html) 中使用 Node.js，可以到 [控制台 > 云引擎 > 设置 > 自定义环境变量](/dashboard/cloud.html?appid={{appid}}#/conf) 里面添加一个新的变量，在第一栏填入 `DEBUG`，第二栏填入 `leancloud:*`（不要丢掉 `leancloud` 和 `*` 之间的冒号）。保存成功后，在本地通过 [命令行工具](leanengine_cli.html) 调试时，可以通过设置环境变量 `DEBUG=leancloud:*` 来让日志信息输出到 [LeanCloud 控制台 > 云引擎 > 应用日志](/dashboard/cloud.html?appid={{appid}}#/log)：

```sh
DEBUG=leancloud:* lean up
```

还可以设置 `localStorage` 来让日志打印到浏览器 Console：

```js
localStorage.setItem('debug', 'leancloud*');

// 为 LiveQuery 启用日志
localStorage.setItem('debug', 'LC*');
```
{% endif %}
{% if platform_name === "Python" %}
```python
# 写在启动脚本的头部
# 如果是在云引擎环境，启动脚本是 wsgi.py
import logging

logging.basicConfig(level=logging.DEBUG)
```
{% endif %}
{% if platform_name === "PHP" %}
```php
// 放在 SDK 初始化语句 Client::initialize() 后面，只需要调用一次即可
Client::setDebug(true);
```
{% endif %}
{% if platform_name === "Android / Java" %}
```java
// 在 AVOSCloud.initialize() 之前调用
AVOSCloud.setLogLevel(AVLogger.Level.DEBUG);
```
{% endif %}
{% if platform_name === ".NET" %}
```cs
// 开启存储日志
AVClient.HttpLog(Debug.Log);

// 开启即时通讯日志
AVRealtime.WebSocketLog(Debug.Log);
```
{% endif %}

{% call docs.alertWrap() %}
在应用发布之前，请关闭调试日志，以免暴露敏感数据。
{% endcall %}

## 验证

首先，确认本地网络环境是可以访问 LeanCloud 服务器的，可以执行以下命令：

```sh
ping "{{host}}"
```

`{{host}}` 为绑定的 API 自定义域名。

如果当前网路正常将会得到如下响应：

```sh
PING api-ucloud.leancloud.cn (123.59.41.31): 56 data bytes
64 bytes from 123.59.41.31: icmp_seq=0 ttl=51 time=9.032 ms
64 bytes from 123.59.41.31: icmp_seq=1 ttl=51 time=7.290 ms
64 bytes from 123.59.41.31: icmp_seq=2 ttl=51 time=8.131 ms
64 bytes from 123.59.41.31: icmp_seq=3 ttl=51 time=9.689 ms
64 bytes from 123.59.41.31: icmp_seq=4 ttl=51 time=6.559 ms
64 bytes from 123.59.41.31: icmp_seq=5 ttl=51 time=8.665 ms
64 bytes from 123.59.41.31: icmp_seq=6 ttl=51 time=8.041 ms
64 bytes from 123.59.41.31: icmp_seq=7 ttl=51 time=8.203 ms
64 bytes from 123.59.41.31: icmp_seq=8 ttl=51 time=6.288 ms
64 bytes from 123.59.41.31: icmp_seq=9 ttl=51 time=7.938 ms

--- api-ucloud.leancloud.cn ping statistics ---
10 packets transmitted, 10 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 6.288/7.984/9.689/0.997 ms
```

{% if platform_name === "Objective-C" %}
下面来试着向 LeanCloud 云端保存一条数据，将下面的代码拷贝到 `viewDidLoad` 方法或其他在应用运行时会被调用的方法中：

```objc
AVObject *testObject = [AVObject objectWithClassName:@"TestObject"];
[testObject setObject:@"Hello world!" forKey:@"words"];
[testObject save];
```

然后，点击 `Run` 运行调试，真机和虚拟机均可。
{% endif %}
{% if platform_name === "Swift" %}
然后在项目中编写如下测试代码：

```swift
do {
    let testObject = LCObject(className: "TestObject")
    try testObject.set("words", value: "Hello world!")
    _ = testObject.save { result in
        switch result {
        case .success:
            break
        case .failure(let error):
            print(error)
        }
    }
} catch {
    print(error)
}
```

然后，点击 `Run` 运行调试，真机和虚拟机均可。
{% endif %}
{% if platform_name === "Android" %}
在 `MainActivity.java` 中的 `onCreate` 方法添加如下代码：

```java
AVObject testObject = new AVObject("TestObject");
testObject.put("words", "Hello world!");
testObject.saveInBackground().subscribe(new Observer<AVObject>() {
    public void onSubscribe(Disposable disposable) {}
    public void onNext(AVObject testObject) {
        System.out.println("保存成功。");
    }
    public void onError(Throwable throwable) {
    }
    public void onComplete() {}
});
```

然后，点击 `Run` 运行调试，真机和虚拟机均可。
{% endif %}
{% if platform_name === "JavaScript" %}
然后在项目中编写如下测试代码：

```js
var TestObject = AV.Object.extend('TestObject');
var testObject = new TestObject();
testObject.set('words', 'Hello world!');
testObject.save().then(function (testObject) {
  console.log('保存成功。')
})
```

保存后运行程序。
{% endif %}
{% if platform_name === "Python" %}
然后在项目中编写如下测试代码：

```python
TestObject = leancloud.Object.extend('TestObject')
test_object = TestObject()
test_object.set('words', "Hello world!")
test_object.save()
```

保存后运行程序。
{% endif %}
{% if platform_name === "PHP" %}
然后在项目中编写如下测试代码：

```php
$testObject = new LeanObject("TestObject");
$testObject->set("words", "Hello world!");
try {
    $testObject->save();
    echo "保存成功。";
} catch (Exception $ex) {
    echo "保存失败。";
}
```

保存后运行程序。
{% endif %}
{% if platform_name === "Android / Java" %}
然后在项目中编写如下测试代码：

```java
AVObject testObject = new AVObject("TestObject");
testObject.put("words", "Hello world!");
testObject.saveInBackground().blockingSubscribe();
```

保存后运行程序。
{% endif %}
{% if platform_name === ".NET" %}
然后在项目中编写如下测试代码：

```cs
AVObject testObject = new AVObject("TestObject");
testObject["words"] = "Hello world!";
Task saveTask = testObject.SaveAsync();
await saveTask;
```

保存后运行程序。
{% endif %}

然后打开 [控制台 > 存储 > 数据 > `TestObject`](/dashboard/data.html?appid={{appid}}#/TestObject)，如果看到如下内容，说明 SDK 已经正确地执行了上述代码，安装完毕。

![数据表中出现一行「words」值为「Hello world!」的数据。](images/testobject_saved.png)

如果控制台没有发现对应的数据，请参考 [问题排查](#问题排查)。

## 问题排查

SDK 安装指南基于当前最新版本的 SDK 编写，所以排查问题前，请先检查下安装的 SDK 是不是最新版本。

### `401 Unauthorized`

如果 SDK 抛出 `401` 异常或者查看本地网络访问日志存在：

```json
{
  "code": 401,
  "error": "Unauthorized."
}
```

则可认定为 App ID 或者 App Key 输入有误，或者是不匹配，很多开发者同时注册了多个应用，导致拷贝粘贴的时候，用 A 应用的 App ID 匹配 B 应用的 App Key，这样就会出现服务端鉴权失败的错误。

### 客户端无法访问网络

客户端尤其是手机端，应用在访问网络的时候需要申请一定的权限。

{% if platform_name === "Android" %}
### 运行中遇到 `NoClassDefFoundError` 异常

一般来说遇到这个问题只有两种可能：

第一种是 Android SDK 的间接依赖并没有能全部下载导致的，可以通过在 gradle 配置中显式指定 `transitive=true` 来解决这个问题：

```
dependencies {
    compile 'com.android.support:multidex:'
    compile 'com.android.support:support-v4:21.0.3'
    compile 'cn.leancloud.android:avoscloud-sdk:v3.+'
    compile('cn.leancloud.android:avoscloud-push:v3.+@aar') { transitive = true }
}
```

第二种情况则是由在 v3.13.+ 以后 Android SDK 引入了 Google ProtoBuf 来提高即时通讯模块的传输效率，随之而来的是类和方法数量的激增，超过了 Android 上存在着方法总数不能超过 65k 的上限而导致的。这个时候我们可以采用 Google 提出的 [解决方案](http://developer.android.com/intl/zh-cn/tools/building/multidex.html#about) 来解决这个问题。

### 运行时遇到 `NoClassDefFoundError: java.util.Objects` 异常

Android 4.4 之前（不含）不支持 `java.util.Objects`。
如您的应用项目需要兼容 Android 4.4 之前的设备，请勿从[旧版 Android SDK]升级至 Java Unified SDK。

[旧版 Android SDK]: https://github.com/leancloud/android-sdk-all/

{% endif %}
