{% import "views/_helper.njk" as docs %}
{% from "views/_data.njk" import android_groovy, android_key_init %}

{% macro requireServerURL() %}
请将 `https://please-replace-with-your-customized.domain.com` 替换为你的应用[绑定的 API 域名](custom-api-domain-guide.html#API_域名)。

国际版应用不要求绑定自定义域名。
如果你的国际版应用（App ID 后缀为 `-MdYXbMMI`）没有绑定自定义域名，**初始化 SDK 时不用传入服务器地址参数**。
极个别　App ID　后缀不为 `-MdYXbMMI` 的国际版应用，请参见[这里的说明](custom-api-domain-guide.html#App_ID_后缀不为_-MdYXbMMI_的国际版应用如何初始化_SDK)。
{% endmacro %}

# {{platform_name}} SDK 安装指南

{% if platform_name === "Android / Java" %}
## SDK 维护期说明

我们于 2018 年 9 月推出了新的 [Java Unified SDK](https://leancloudblog.com/java-unified-sdk-kai-fang-ce-shi-tong-zhi/)(以下简称为「Java SDK」)，兼容纯 Java、云引擎和 Android 等多个平台，老的 Android SDK（版本号低于 `5.0.0`，`groupId` 为 `cn.leancloud.android` 的 libraries）于 2019 年 9 月底停止维护。欢迎老 SDK 的用户尽快切换到新的 Java SDK，具体迁移方法详见 [Java Unified SDK 迁移指南](java_unified_sdk_migration.html)。


## 平台与 SDK 对应关系
Java SDK 主要包含以下几个 library，其层次结构以及平台对应关系如下：

### 基础包（可以在纯 Java 环境下调用）
- storage-core：包含所有数据存储的功能，如
  - 结构化数据（AVObject）
  - 内建账户系统（AVUser）
  - 查询（AVQuery）
  - 文件存储（AVFile）
  - 社交关系（AVFriendship，当前版本暂不提供）
  - 朋友圈（AVStatus，当前版本暂不提供）
  - 短信（AVSMS）
  - 等等
- realtime-core：部分依赖 storage-core library，实现了 LiveQuery 以及即时通讯功能，如：
  - LiveQuery
  - AVIMClient
  - AVIMConversation 以及多种场景对话
  - AVIMMessage 以及多种子类化的多媒体消息
  - 等等

### Android 特有的包
- storage-android：是 storage-core 在 Android 平台的定制化实现，接口与 storage-core 完全相同。
- realtime-android：是 realtime-core 在 Android 平台的定制化实现，并且增加 Android 推送相关接口。
- mixpush-android：是 LeanCloud 混合推送的 library，支持华为、小米、魅族、vivo 以及 oppo 的官方推送。
- leancloud-fcm：是 Firebase Cloud Messaging 的封装 library，供美国节点的 app 使用推送服务。


### 模块依赖关系
Java SDK 一共包含如下几个模块：

目录 | 模块名 | 适用平台 | 依赖关系
---|---|---|---
./core | storage-core，存储核心 library | java | 无，它是 LeanCloud 最核心的 library
./realtime | realtime-core，LiveQuery 与实时通讯核心 library | java | storage-core
./android-sdk/storage-android | storage-android，Android 存储 library | Android | storage-core
./android-sdk/realtime-android | realtime-android，Android 推送、LiveQuery、即时通讯 library | Android | storage-android, realtime-core
./android-sdk/mixpush-android | Android 混合推送 library | Android | realtime-android
./android-sdk/leancloud-fcm | Firebase Cloud Messaging library | Android | realtime-android


{% endif %}

## 获取 SDK

{% if platform_name === "Objective-C" or platform_name === "Swift" or platform_name === "Python" or platform_name === "PHP" or platform_name === "Android / Java" or platform_name === "Flutter" %}
获取 SDK 有多种方式，较为推荐的方式是通过包依赖管理工具下载最新版本。

### 包依赖管理工具安装
{% endif %}

{% if platform_name === "Objective-C" %}
通过 [CocoaPods](https://cocoapods.org) 安装可以最大化地简化安装过程。

首先，确保开发环境中已经安装了最新版 `pod`。如果没有，请参考官网的 [INSTALL](https://cocoapods.org) 文档。

接着，在项目根目录下通过命令行工具执行下列命令生成 `Podfile` 文件：

```sh
$ pod init
```

参考 [GET STARTED](https://cocoapods.org) 文档，在 `Podfile` 文件中的 `target` 里添加以下 pod 依赖：

```ruby
pod 'AVOSCloud'           # 数据存储、短信、推送、云引擎等基础服务模块，必选
pod 'AVOSCloudIM'         # 即时通讯模块，可选
pod 'AVOSCloudLiveQuery'  # LiveQuery 模块，可选
```

> **注意**，`AVOSCloudIM` 依赖了 `AVOSCloud`，`AVOSCloudLiveQuery` 依赖了 `AVOSCloudIM`，所以不同模块的版本号必需保持一致。

最后，在项目根目录下执行下列任意命令，集成最新的 SDK：

```sh
$ pod update
```

或者

```sh
$ pod install --repo-update
```

集成 SDK 成功后，使用项目根目录下 **`<项目名称>.xcworkspace`** 来打开项目。
{% endif %}
{% if platform_name === "Swift" %}
通过 [CocoaPods](https://cocoapods.org) 或者 [Swift Package Manager](https://developer.apple.com/documentation/swift_packages) 安装可以最大化地简化安装过程。

#### CocoaPods

首先，确保开发环境中已经安装了最新版 `pod`。如果没有，请参考官网的 [INSTALL](https://cocoapods.org) 文档。

接着，在项目根目录下通过命令行工具执行下列命令生成 `Podfile` 文件：

```sh
$ pod init
```

参考 [GET STARTED](https://cocoapods.org) 文档，在 `Podfile` 文件中的 `target` 里添加 pod 依赖：

```ruby
pod 'LeanCloud'
```

或者使用 [Subspecs](https://guides.cocoapods.org/syntax/podspec.html#subspec) 方式：

```ruby
pod 'LeanCloud/Foundation' # 数据存储、短信、推送、云引擎等基础服务模块，必选
pod 'LeanCloud/RTM'        # 即时通讯、LiveQuery 模块，可选
```

> **注意**，`LeanCloud/RTM` 依赖了 `LeanCloud/Foundation`，所以不同模块的版本号必需保持一致。

最后，在项目根目录下执行下列任意命令，集成最新的 SDK：

```sh
$ pod update
```

或者

```sh
$ pod install --repo-update
```

集成 SDK 成功后，使用项目根目录下 **`<项目名称>.xcworkspace`** 来打开项目。

#### Swift Package Manager

参考 [Apple 官方提供的集成文档](https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app)，添加 [Swift SDK Repo](https://github.com/leancloud/swift-sdk) 即可。
{% endif %}
{% if platform_name === "PHP" %}
#### composer

composer 是推荐的 PHP 包管理工具。安装 `leancloud-sdk` 只需执行以下命令：

```sh
composer require leancloud/leancloud-sdk
```

注意：

- `leancloud-sdk` 依赖 PHP 的 curl 扩展（常见 Linux 系统下一般需要安装 `php-curl` 这个包）。
- 如果 composer 访问 packagist 仓库有问题，需要 [设置镜像](https://mirrors.aliyun.com/composer/) 或者通过代理（设置 `http_proxy` 环境变量）访问。

{% endif %}
{% if platform_name === "Python" %}
#### pip

```sh
pip install leancloud
```

取决于系统环境，可能需要在命令前加 `sudo`。
{% endif %}

{% if platform_name === "Android / Java" %}

我们已经将所有的 library 发布到了 maven 中心仓库，开发者可以用以下任意包管理工具来安装 SDK。

#### 使用存储功能
Maven：

```xml
<dependency>
    <groupId>cn.leancloud</groupId>
    <artifactId>storage-core</artifactId>
    <version>{{ version.unified }}</version>
</dependency>
```

Ivy：

```xml
<dependency org="cn.leancloud" name="storage-core" rev="{{ version.unified }}" />
```

SBT：

```sbt
libraryDependencies += "cn.leancloud" %% "storage-core" % "{{ version.unified }}"
```

Gradle：

```groovy
implementation 'cn.leancloud:storage-core:{{ version.unified }}'
```

如果是 Android 项目，则换成以下这些包：

{{ android_groovy() }}

#### 使用即时通讯 / 推送服务
Example for Maven：

```
<dependency>
    <groupId>cn.leancloud</groupId>
    <artifactId>realtime-core</artifactId>
    <version>{{ version.unified }}</version>
</dependency>
```

and for Ivy:
```
<dependency org="cn.leancloud" name="realtime-core" rev="{{ version.unified }}" />
```

and for SBT:
```
libraryDependencies += "cn.leancloud" %% "realtime-core" % "{{ version.unified }}"
```

and for Gradle:
```
implementation 'cn.leancloud:realtime-android:{{ version.unified }}'
implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
```

#### 使用混合推送服务

Example for Gradle：
```
implementation 'cn.leancloud:mixpush-android:{{ version.unified }}'
implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
```

#### 对 fastjson 的特别说明

从 `6.5.0` 版本开始，我们 Java 平台和 Android 平台的 SDK 都统一依赖 fastjson 最新的 JVM 版本（`1.2.68`），开发者在使用的时候不需要做特殊的处理。

> 对 `6.5.0` 之前的 SDK 版本，我们根据使用环境做了不同的依赖选择：
- storage-core 依赖的是面向纯 Java 平台的 fastjson（版本为 `1.2.60`）;
- storage-android 和 realtime-android 以及其他推送 sdk 依赖的是面向 Android 平台的 fastjson（版本为 `1.1.71.android`）。
>
> 同时，我们发现 Android 版本的 fastjson 库在反序列化的时候，对 double 和 float 类型的处理存在漏洞。如果属性值中存在 `3.1415F` 或 `3.1415D` 这样的数字，JSON#parse 方法会抛出异常，异常信息类似于 `com.alibaba.fastjson.JSONException: syntax error, pos 123, json : xxx `。为此我们提供了一个临时的 bugfix 版本供开发者下载使用，下载地址见[这里](https://github.com/leancloud/java-unified-sdk/tree/master/3rd-parties)。开发者可以通过引用本地文件的方式来依赖这个版本，build.gradle 中的依赖部分可按照如下示例进行更改：

> ```
>     implementation fileTree(include: ['*.jar'], dir: 'libs') // 注意把上面的 lib 拷贝到该目录下
>
>     implementation('cn.leancloud:realtime-android:6.4.4') { // 注意替换具体的版本号
>         exclude group: 'com.alibaba', module: 'fastjson'
>         exclude group: 'org.ligboy.retrofit2', module: 'converter-fastjson'
>     }
>
>     implementation('cn.leancloud:storage-android:6.4.4') { // 注意替换具体的版本号
>         exclude group: 'com.alibaba', module: 'fastjson'
>         exclude group: 'org.ligboy.retrofit2', module: 'converter-fastjson'
>     }
>
>     // implementation 'com.alibaba:fastjson:1.1.71.android'  // 注意删除这一行
>
>     implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
>     implementation("org.ligboy.retrofit2:converter-fastjson-android:2.1.0") {
>         exclude group: 'com.alibaba', module: 'fastjson' // 注意增加这一行
>     }
> ```

#### 对 maven 源的特别说明

我们发现有时候 Maven 源的 CDN 缓存同步策略出现问题，可能会导致我们某个版本或者该版本下某种格式的 library 文件无法下载，这时候你可以在配置文件中显式增加一个 Sonatype 的源，就可以解决找不到文件的问题。

Maven pom.xml 的修改示例如下：
```
<repositories>
    <repository>
        <id>oss-sonatype</id>
        <name>oss-sonatype</name>
        <url>https://oss.sonatype.org/content/groups/public/</url>
    </repository>
</repositories>
```

Gradle build.gradle 的修改示例如下：
```
buildscript {
    repositories {
        google()
        jcenter()
        // 增加下面的配置
        maven {
            url "https://oss.sonatype.org/content/groups/public/"
        }
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        // 增加下面的配置
        maven {
            url "https://oss.sonatype.org/content/groups/public/"
        }
    }
}

```

{% endif %}
{% if platform_name === "Flutter" %}
SDK 发布在 pub.dev:
* [数据存储 SDK](https://pub.dev/packages/leancloud_storage)
* [即时通信 SDK](https://pub.dev/packages/leancloud_official_plugin)

#### 使用数据存储

在 pubspec.yaml 中，将 SDK 添加到依赖项列表:

```yaml
dependencies:
  flutter:
    sdk: flutter
  ...
  leancloud_storage: ^{{ version.flutter_storage }}
```

#### 使用即时通信

即时通信的 Flutter 插件 SDK 基于 [Swift SDK](https://github.com/leancloud/swift-sdk) 以及 [Java Unified SDK](https://github.com/leancloud/java-unified-sdk) 开发。

##### 第一步

在 pubspec.yaml 中，将 SDK 添加到依赖项列表:

```yaml
dependencies:
  flutter:
    sdk: flutter
  ...
  leancloud_official_plugin: ^{{ version.flutter_official_plugin }}
```

##### 第二步

**Android 开发者**要配置 Gradle 安装 Java Unified SDK，打开工程目录 android/app/build.gradle，添加如下依赖：

```yaml
dependencies {
  implementation 'cn.leancloud:storage-android:{{ version.unified }}'
  implementation 'cn.leancloud:realtime-android:{{ version.unified }}'
  implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
}
```
**iOS 开发者**需要通过 CocoaPods 安装 Swift SDK：

```sh
$ cd ios/
$ pod update # 或者 $ pod install --repo-update
```
{% endif %}

{% if platform_name === "Objective-C" or platform_name === "Swift" or platform_name === "Python" or platform_name === "PHP" or platform_name === "Android / Java" %}
### 手动安装
{% endif %}

{% if platform_name === "Python" %}
<a class="btn btn-default" target="_blank" href="https://releases.leanapp.cn/#/leancloud/python-sdk/releases">下载 SDK</a>
{% elif platform_name === "PHP" %}
<a class="btn btn-default" target="_blank" href="https://releases.leanapp.cn/#/leancloud/php-sdk/releases">下载 SDK</a>
{% elif platform_name === "Android / Java" or platform_name === "Objective-C" %}
<a class="btn btn-default" target="_blank" href="sdk_down.html">下载 SDK</a>
{% endif %}

{% if platform_name === "Android / Java" %}
#### 从源码编译

可以执行以下命令获取 Java SDK 并安装：
```
$ git clone https://github.com/leancloud/java-unified-sdk.git
$ cd java-unified-sdk/
$ mvn clean install
```
获取和安装 Android SDK：
```
$ cd java-unified-sdk/
$ cd android-sdk/
$ gradle clean assemble
```
{% endif %}
{% if platform_name === "Objective-C" %}
#### 下载源码

在 SDK 下载页面，下载最新版的源码。

#### 集成 SDK

将 `AVOS`/`AVOS.xcodeproj` 项目文件拖入示例项目，作为 subproject：

![「AVOS.xcodeproj」会出现在项目根目录下。](images/quick_start/ios/subproject.png)

接着为示例项目连接依赖库，在 **xcodeproj > target > general > frameworks** 添加如下内容：

![「AVOSCloud.framework」，「AVOSCloudIM.framework」和「AVOSCloudLiveQuery.framework。」](images/quick_start/ios/link-binary.png)

> 上图选择了 iOS 平台的 `AVOSCloud`，`AVOSCloudIM` 以及 `AVOSCloudLiveQuery` 三个 framework。请根据实际需要来选择支持的平台以及要使用的模块。

这样就集成完毕了。
{% endif %}
{% if platform_name === "Swift" %}
> 下载 Swift SDK 源码后，也需要等待 Swift Package Manager 下载并集成其它依赖，所以推荐直接使用 Swift Package Manager。
{% endif %}

{% if platform_name === "JavaScript" %}
{{ docs.defaultLang('存储服务') }}

本指南按照应用的适用平台来介绍各自的安装与集成方式。

|[<img src="images/platforms/html5.svg" width="80"/>](#Web)|[<img src="images/platforms/node-js.svg" width="80"/>](#Node.js)|[<img src="images/platforms/weapp.svg" width="80"/>](#微信 / QQ 小程序)|[<img src="images/platforms/weapp-game.svg" width="80"/>](#微信 / QQ 小游戏)|[<img src="images/platforms/alipay-mini-app.png" width="65"/>](#支付宝小程序)|[<img src="images/platforms/baidu-mini-app.png" width="65"/>](#百度小程序)|[<img src="images/platforms/toutiao-mini-app.png" width="65"/>](#字节跳动小程序)|[<img src="images/platforms/cocos.png" width="80"/>](#CocosCreator)|[<img src="images/platforms/laya.png" width="80"/>](#LayaAir)|[<img src="images/platforms/quickapp.png" width="80"/>](#快应用)|[<img src="images/platforms/react-native.svg" width="80"/>](#React-Native)|[<img src="images/platforms/electron.svg" width="80"/>](#Electron)|[<img src="images/platforms/other.svg" width="80"/>](#其他平台)
|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|
|Web|Node.js|微信 / QQ 小程序|微信 / QQ 小游戏|支付宝小程序|百度小程序|字节跳动小程序|CocosCreator|LayaAir|快应用|React Native|Electron|其他|

### Web

适用于运行在浏览器、WebView 或其他应用内 HTML 平台上的应用。

#### 安装与引用 SDK

##### npm

如果你的 Web 应用使用了 webpack 等前端打包工具，我们推荐使用包管理工具 npm 安装 SDK：

```存储服务
$ npm install leancloud-storage --save
```

```存储服务（LiveQuery)
$ npm install leancloud-storage --save
```

```即时通讯
$ npm install leancloud-realtime --save
```

```即时通讯（含富媒体消息）
$ npm install leancloud-realtime leancloud-realtime-plugin-typed-messages leancloud-storage --save
```

如果因为网络原因无法通过官方的 npm 站点下载，推荐通过 taobao 镜像来下载（在 `npm install` 后添加 `--registry=https://registry.npm.taobao.org` 参数）。

安装完成后，在代码中通过 `require` 获得 SDK 的引用：

```存储服务
const AV = require('leancloud-storage');
const { Query, User } = AV;
```
```存储服务（LiveQuery)
const AV = require('leancloud-storage/live-query');
const { Query, User } = AV;
```
```即时通讯
const { Realtime, TextMessage } = require('leancloud-realtime');
```
```即时通讯（含富媒体消息）
const AV = require('leancloud-storage');
const { Realtime, TextMessage } = require('leancloud-realtime');
// 富媒体消息插件暴露（export）的成员完整列表可以参考 [富媒体消息插件 API 文档](https://leancloud.github.io/js-realtime-sdk/plugins/typed-messages/docs/module-leancloud-realtime-plugin-typed-messages.html)。
const { TypedMessagesPlugin, ImageMessage } = require('leancloud-realtime-plugin-typed-messages');
```

{{ docs.langSpecStart('即时通讯 即时通讯（含富媒体消息）') }}
为了保证兼容性，SDK 一直以来分发的都是 ECMAScript 5 版本的代码，并打包了所有需要的 Polyfills（比如 Promise）。
即时通讯 SDK v5.0.0-rc.2 起同时提供以最新版本 ECMAScript 为编译目标的版本，该版本拥有更小的体积与更好的运行时优化，适用于只需要兼容最新版本浏览器的使用场景。
如果应用使用了 `@babel/preset-env` 或类似方案，也可以在转译时 include 最新 ECMAScript 版本的 SDK，由应用来决定要兼容的目标运行环境。
需要注意最新版本 ECMAScript 每年都会变，而该版本的目标即是提供与最新标准对齐的代码，因此由于引入了新版本 ECMASCript 特性导致不再支持某些非最新版本的运行环境将不被视为破坏兼容性的改动。
当前 ECMAScript 的版本为 2020。

如果想要试用这一功能，可以通过以下方式引入即时通讯 SDK：

```js
const { Realtime } = require('leancloud-realtime/es-latest');
```
{{ docs.langSpecEnd('即时通讯 即时通讯（含富媒体消息）') }}

##### CDN

你也可以直接在页面中通过 `script` 标签引入我们的 SDK：


```存储服务
<script src="//cdn.jsdelivr.net/npm/leancloud-storage@{{jssdkversion}}/dist/av-min.js"></script>
```
```存储服务（LiveQuery)
<script src="//cdn.jsdelivr.net/npm/leancloud-storage@{{jssdkversion}}/dist/av-live-query-min.js"></script>
```
```即时通讯
<script src="//cdn.jsdelivr.net/npm/leancloud-realtime@{{jsimsdkversion}}/dist/im-browser.min.js"></script>
```
```即时通讯（含富媒体消息）
<script src="//cdn.jsdelivr.net/npm/leancloud-storage@{{jssdkversion}}/dist/av-min.js"></script>
<script src="//cdn.jsdelivr.net/npm/leancloud-realtime@{{jsimsdkversion}}/dist/im-browser.min.js"></script>
<script src="//cdn.jsdelivr.net/npm/leancloud-realtime-plugin-typed-messages@3.1.0/dist/typed-messages.min.js"></script>
```

通过这种方式引入的 SDK 可以通过全局变量 `AV` 获得引用：


```存储服务
const { Query, User } = AV;
```
```存储服务（LiveQuery)
const { Query, User } = AV;
```
```即时通讯
const { Realtime, TextMessage } = AV;
```
```即时通讯（含富媒体消息）
const { Realtime, TextMessage, TypedMessagesPlugin, ImageMessage } = AV;
```

{{ docs.langSpecStart('即时通讯') }}
如果想要试用以最新版本 ECMAScript 为编译目标的即时通讯 SDK 版本（参见 [npm](#npm) 章节的说明），可以这样加载文件：

```html
<script src="//cdn.jsdelivr.net/npm/leancloud-realtime@{{jsimsdkversion}}/dist/es-latest/im.js"></script>
```
{{ docs.langSpecEnd('即时通讯') }}

### Node.js

JavaScript SDK 也可以运行在 Node.js 运行环境中。如果希望在云引擎中访问我们的存储服务，请参照 [云引擎快速入门](leanengine_quickstart.html)，使用模板项目中提供的 `leanengine` 包接入存储服务。

注意，云引擎内部访问 API 是通过内网，所以不需要也不应该配置 API 自定义域名。
模板项目和[云引擎网站托管开发指南](leanengine_webhosting_guide-node.html)中的示例代码均未配置 API 自定义域名，
请勿设置 serverURL，以免变成公网访问，影响性能。
在使用命令行工具（`lean up`）本地调试云引擎托管项目时，虽然是公网访问，但命令行工具会自动设置相应的环境变量，供 SDK 访问 API，所以也不需要设置 serverURL。

#### 安装与引用 SDK

Node.js 中 SDK 的安装与引用也是通过包管理工具 npm，请参考 [npm](#npm)。

### 微信 / QQ 小程序

{{ docs.note('QQ 小程序兼容微信小程序的 API，因此两者使用同一个 SDK，安装与使用方法也是一样的。不过 QQ 小程序使用的 Adapters 与微信小程序不同，请前往 [QQ 小程序 Adapters 下载页](https://cdn.jsdelivr.net/npm/@leancloud/platform-adapters-qqapp/lib/) 下载。')}}

#### 手动导入文件

{{ docs.langSpecStart('存储服务') }}
前往 [存储 SDK 下载页](https://releases.leanapp.cn/#/leancloud/javascript-sdk/releases)，下载最新版本的 `av-core-min.js`，移动到 `libs` 目录。
{{ docs.langSpecEnd('存储服务') }}

{{ docs.langSpecStart('存储服务（LiveQuery)') }}
前往 [存储 SDK 下载页](https://releases.leanapp.cn/#/leancloud/javascript-sdk/releases)，下载最新版本的 `av-live-query-core-min.js`，移动到 `libs` 目录。
{{ docs.langSpecEnd('存储服务（LiveQuery)') }}

{{ docs.langSpecStart('即时通讯') }}
前往 [即时通讯 SDK 下载页](https://releases.leanapp.cn/#/leancloud/js-realtime-sdk/releases)，下载最新版本的 `im.min.js`，移动到 `libs` 目录。
{{ docs.langSpecEnd('即时通讯') }}

{{ docs.langSpecStart('即时通讯（含富媒体消息）') }}
前往 [存储 SDK 下载页](https://releases.leanapp.cn/#/leancloud/javascript-sdk/releases)，下载最新版本的 `av-core-min.js`，移动到 `libs` 目录，并将文件重命名为 `leancloud-storage.js`。

前往 [即时通讯 SDK 下载页](https://releases.leanapp.cn/#/leancloud/js-realtime-sdk/releases)，下载最新版本的 `im.min.js`，移动到 `libs` 目录，并将文件重命名为 `leancloud-realtime.js`。

下载 [`typed-messages.min.js`](https://cdn.jsdelivr.net/npm/leancloud-realtime-plugin-typed-messages@3/dist/typed-messages.min.js)，移动到 `libs` 目录。必须保证<strong>三个文件在同一目录中</strong>。
{{ docs.langSpecEnd('即时通讯（含富媒体消息）') }}

前往 [微信小程序 Adapters 下载页](https://cdn.jsdelivr.net/npm/@leancloud/platform-adapters-weapp/lib/)，下载最新版本的 `index.js`，移动到 `libs` 目录，并将文件重命名为 `leancloud-adapters-weapp.js`。

在 `app.js` 中引用 SDK，并设置 Adapters ：

{{ docs.note('在其他文件中引用 SDK 时请将路径替换成对应的相对路径，Adapters 仅需在 app.js 中设置。') }}

```存储服务
const AV = require('./libs/av-core-min.js');
const adapters = require('./libs/leancloud-adapters-weapp.js');

AV.setAdapters(adapters);
```
```存储服务（LiveQuery)
const AV = require('./libs/av-live-query-core-min.js');
const adapters = require('./libs/leancloud-adapters-weapp.js');

AV.setAdapters(adapters);
```
```即时通讯
const { Realtime, TextMessage, setAdapters } = require('./libs/im.min.js');
const adapters = require('./libs/leancloud-adapters-weapp.js');

setAdapters(adapters);
```
```即时通讯（含富媒体消息）
// 需要保证依次加载三个文件
const AV = require('./libs/leancloud-storage.js');
const { Realtime, TextMessage, setAdapters } = require('./libs/leancloud-realtime.js');
const { TypedMessagesPlugin, ImageMessage } = require('./libs/typed-messages.min.js');
const adapters = require('./libs/leancloud-adapters-weapp.js');

AV.setAdapters(adapters); // 为存储 SDK 设置 adapters
setAdapters(adapters);    // 为即时通讯 SDK 设置 adapters
```

#### WePY

如果使用 [WePY](https://tencent.github.io/wepy/) 来开发小程序，可以直接通过 npm 安装和引用 SDK，具体操作步骤请参考 [npm](#npm)。

#### mpvue

如果使用 [mpvue](http://mpvue.com/) 来开发小程序，可以直接通过 npm 安装和引用 SDK，具体操作步骤请参考 [npm](#npm)。

#### Taro

如果使用 [Taro](https://taro.jd.com/) 来开发小程序，通过 npm 安装 SDK 后，需要从指定路径引入小程序 SDK：

```js
import AV from 'leancloud-storage/dist/av-weapp.js';
```

如果使用 TypeScript 开发，可以手动把 `leancloud-storage/storage.d.ts` 复制到 `leancloud-storage/dist/av-live-query-weapp.d.ts`。

#### 小程序插件

小程序插件引入 SDK 的方法与微信小程序一致。

### 微信 / QQ 小游戏

小游戏手动导入 SDK 的步骤与小程序一致，请参考 [微信 / QQ 小程序 · 手动导入文件](#手动导入文件)。

如果使用游戏引擎提供的开发工具开发小游戏，请参照对应的游戏引擎章节。

### 支付宝小程序

支付宝小程序通过 npm 安装与引用 SDK，同时由独立的 Adapters 库（@leancloud/platform-adapters-alipay）提供支持。

安装：

```存储服务
$ npm install leancloud-storage @leancloud/platform-adapters-alipay
```

```存储服务（LiveQuery)
$ npm install leancloud-storage @leancloud/platform-adapters-alipay
```

```即时通讯
$ npm install leancloud-realtime @leancloud/platform-adapters-alipay
```

```即时通讯（含富媒体消息）
$ npm install leancloud-realtime leancloud-realtime-plugin-typed-messages leancloud-storage @leancloud/platform-adapters-alipay
```

获得引用：

```存储服务
const AV = require('leancloud-storage/core');
const adapters = require('@leancloud/platform-adapters-alipay');

AV.setAdapters(adapters);
```
```存储服务（LiveQuery)
const AV = require('leancloud-storage/live-query-core');
const adapters = require('@leancloud/platform-adapters-alipay');

AV.setAdapters(adapters);
```
```即时通讯
const { Realtime, setAdapters } = require('leancloud-realtime/im');
const adapters = require('@leancloud/platform-adapters-alipay');

setAdapters(adapters);
```
```即时通讯（含富媒体消息）
const AV = require('leancloud-storage/core');
const { Realtime, setAdapters } = require('leancloud-realtime/im');
const { TypedMessagesPlugin, ImageMessage } = require('leancloud-realtime-plugin-typed-messages');
const adapters = require('@leancloud/platform-adapters-alipay');

AV.setAdapters(adapters); // 为存储 SDK 设置 adapters
setAdapters(adapters);    // 为即时通讯 SDK 设置 adapters
```

### 百度小程序

支付宝小程序通过 npm 安装与引用 SDK，同时由独立的 Adapters 库（@leancloud/platform-adapters-baidu）提供支持。

安装：

```存储服务
$ npm install leancloud-storage @leancloud/platform-adapters-baidu
```

```存储服务（LiveQuery)
$ npm install leancloud-storage @leancloud/platform-adapters-baidu
```

```即时通讯
$ npm install leancloud-realtime @leancloud/platform-adapters-baidu
```

```即时通讯（含富媒体消息）
$ npm install leancloud-realtime leancloud-realtime-plugin-typed-messages leancloud-storage @leancloud/platform-adapters-baidu
```

获得引用：

```存储服务
const AV = require('leancloud-storage/core');
const adapters = require('@leancloud/platform-adapters-baidu');

AV.setAdapters(adapters);
```
```存储服务（LiveQuery)
const AV = require('leancloud-storage/live-query-core');
const adapters = require('@leancloud/platform-adapters-baidu');

AV.setAdapters(adapters);
```
```即时通讯
const { Realtime, setAdapters } = require('leancloud-realtime/im');
const adapters = require('@leancloud/platform-adapters-baidu');

setAdapters(adapters);
```
```即时通讯（含富媒体消息）
const AV = require('leancloud-storage/core');
const { Realtime, setAdapters } = require('leancloud-realtime/im');
const { TypedMessagesPlugin, ImageMessage } = require('leancloud-realtime-plugin-typed-messages');
const adapters = require('@leancloud/platform-adapters-baidu');

AV.setAdapters(adapters); // 为存储 SDK 设置 adapters
setAdapters(adapters);    // 为即时通讯 SDK 设置 adapters
```

### 字节跳动小程序

{{ docs.langSpecStart('存储服务') }}
前往 [存储 SDK 下载页](https://releases.leanapp.cn/#/leancloud/javascript-sdk/releases)，下载最新版本的 `av-core-min.js`，移动到 `libs` 目录。
{{ docs.langSpecEnd('存储服务') }}

{{ docs.langSpecStart('存储服务（LiveQuery)') }}
前往 [存储 SDK 下载页](https://releases.leanapp.cn/#/leancloud/javascript-sdk/releases)，下载最新版本的 `av-live-query-core-min.js`，移动到 `libs` 目录。
{{ docs.langSpecEnd('存储服务（LiveQuery)') }}

{{ docs.langSpecStart('即时通讯') }}
前往 [即时通讯 SDK 下载页](https://releases.leanapp.cn/#/leancloud/js-realtime-sdk/releases)，下载最新版本的 `im.min.js`，移动到 `libs` 目录。
{{ docs.langSpecEnd('即时通讯') }}

{{ docs.langSpecStart('即时通讯（含富媒体消息）') }}
前往 [存储 SDK 下载页](https://releases.leanapp.cn/#/leancloud/javascript-sdk/releases)，下载最新版本的 `av-core-min.js`，移动到 `libs` 目录，并将文件重命名为 `leancloud-storage.js`。

前往 [即时通讯 SDK 下载页](https://releases.leanapp.cn/#/leancloud/js-realtime-sdk/releases)，下载最新版本的 `im.min.js`，移动到 `libs` 目录，并将文件重命名为 `leancloud-realtime.js`。

下载 [`typed-messages.min.js`](https://cdn.jsdelivr.net/npm/leancloud-realtime-plugin-typed-messages@3/dist/typed-messages.min.js)，移动到 `libs` 目录。必须保证<strong>三个文件在同一目录中</strong>。
{{ docs.langSpecEnd('即时通讯（含富媒体消息）') }}

前往 [字节跳动小程序 Adapters 下载页](https://cdn.jsdelivr.net/npm/@leancloud/platform-adapters-toutiao/lib/)，下载最新版本的 `index.js`，移动到 `libs` 目录，并将文件重命名为 `leancloud-adapters-toutiao.js`。

在 `app.js` 中引用 SDK，并设置 Adapters ：

{{ docs.note('在其他文件中引用 SDK 时请将路径替换成对应的相对路径，Adapters 仅需在 app.js 中设置。') }}

```存储服务
const AV = require('./libs/av-core-min.js');
const adapters = require('./libs/leancloud-adapters-toutiao.js');

AV.setAdapters(adapters);
```
```存储服务（LiveQuery)
const AV = require('./libs/av-live-query-core-min.js');
const adapters = require('./libs/leancloud-adapters-toutiao.js');

AV.setAdapters(adapters);
```
```即时通讯
const { Realtime, TextMessage, setAdapters } = require('./libs/im.min.js');
const adapters = require('./libs/leancloud-adapters-toutiao.js');

setAdapters(adapters);
```
```即时通讯（含富媒体消息）
// 需要保证依次加载三个文件
const AV = require('./libs/leancloud-storage.js');
const { Realtime, TextMessage, setAdapters } = require('./libs/leancloud-realtime.js');
const { TypedMessagesPlugin, ImageMessage } = require('./libs/typed-messages.min.js');
const adapters = require('./libs/leancloud-adapters-toutiao.js');

AV.setAdapters(adapters); // 为存储 SDK 设置 adapters
setAdapters(adapters);    // 为即时通讯 SDK 设置 adapters
```

### CocosCreator

CocosCreator 支持直接通过 npm 安装与引用 SDK，具体操作步骤请参考 [npm](#npm)。

{{ docs.note("CocosCreator 项目默认没有 `package.json` 文件，可以在安装 SDK 前通过 `npm init -y` 命令创建。") }}

如果你的 CocosCreator 项目需要发布为微信或 QQ 小游戏，需要在构建发布到小游戏之前修改 SDK 的引用路径：

```存储服务
// SDK 应用路径变更为
- const AV = require('leancloud-storage');
+ const AV = require('leancloud-storage/dist/av-weapp-min.js');
```

```存储服务（LiveQuery)
// SDK 应用路径变更为
- const AV = require('leancloud-storage/live-query');
+ const AV = require('leancloud-storage/dist/av-live-query-weapp-min.js');
```

```即时通讯
// SDK 应用路径变更为
- const { Realtime } = require('leancloud-realtime');
+ const { Realtime } = require('leancloud-realtime/dist/im-weapp.js');
```

```即时通讯（含富媒体消息）
// 暂不支持
```

请注意，此改动会导致其他平台的产出（包括浏览器与模拟器的预览功能）不能正常工作，因此应该只在构建发布到小游戏之前临时修改，并在发布之后修改回来。

在改动之后，CocosCreator 的控制台可能会出现 load script error，但不影响构建发布小游戏，并且构建产出在小游戏开发工具中运行也不会有异常。

### LayaAir

LayaAir 支持直接通过 npm 安装与引用 SDK，具体操作步骤请参考 [npm](#npm)。

{{ docs.note("LayaAir 项目默认没有 `package.json` 文件，可以在安装 SDK 前通过 `npm init -y` 命令创建。") }}

如果你的 LayaAir 项目需要发布为微信或 QQ 小游戏，需要在构建发布到小游戏之前修改 SDK 的引用路径，具体替换方法请参考 [CocosCreator](#cocoscreator) 章节。

同样，此改动会导致其他平台的产出（包括浏览器与模拟器的预览功能）不能正常工作，因此应该只在构建发布到小游戏之前临时修改，并在发布之后修改回来。

### 快应用

快应用通过 npm 安装与引用 SDK，同时由独立的 Adapters 库（`@leancloud/platform-adapters-quickapp`）提供支持。

安装：

```存储服务
$ npm install leancloud-storage @leancloud/platform-adapters-quickapp --save
```

```存储服务（LiveQuery)
$ npm install leancloud-storage @leancloud/platform-adapters-quickapp --save
```

```即时通讯
$ npm install leancloud-realtime @leancloud/platform-adapters-quickapp --save
```

```即时通讯（含富媒体消息）
$ npm install leancloud-realtime leancloud-realtime-plugin-typed-messages leancloud-storage @leancloud/platform-adapters-quickapp --save
```

获得引用：

```存储服务
const AV = require('leancloud-storage/core');
const adapters = require('@leancloud/platform-adapters-quickapp');
AV.setAdapters(adapters);
```
```存储服务（LiveQuery)
const AV = require('leancloud-storage/live-query-core');
const adapters = require('@leancloud/platform-adapters-quickapp');
AV.setAdapters(adapters);
```
```即时通讯
const { Realtime, setAdapters } = require('leancloud-realtime/im');
const adapters = require('@leancloud/platform-adapters-quickapp');
setAdapters(adapters);
```
```即时通讯（含富媒体消息）
const AV = require('leancloud-storage/core');
const { Realtime, setAdapters } = require('leancloud-realtime/im');
const { TypedMessagesPlugin, ImageMessage } = require('leancloud-realtime-plugin-typed-messages');
const adapters = require('@leancloud/platform-adapters-quickapp');
AV.setAdapters(adapters);
setAdapters(adapters);
```

### React Native

React Native 通过 npm 安装与引用 SDK，同时由独立的 Adapters 库（`@leancloud/platform-adapters-react-native`）提供支持。

安装：

```存储服务
# Step 1: Install
$ yarn add leancloud-storage @leancloud/platform-adapters-react-native @react-native-community/async-storage@1

# Step 2: Link
# For React Native 0.60+
$ npx pod-install
# For React Native <= 0.59
# npx react-native link @react-native-community/async-storage
# For Expo (SDK >= 38) 无需 link
```

```存储服务（LiveQuery)
# Step 1: Install
$ yarn add leancloud-storage @leancloud/platform-adapters-react-native @react-native-community/async-storage@1

# Step 2: Link
# For React Native 0.60+
$ npx pod-install
# For React Native <= 0.59
# npx react-native link @react-native-community/async-storage
# For Expo (SDK >= 38) 无需 link
```

```即时通讯
# Step 1: Install
$ yarn add leancloud-realtime @leancloud/platform-adapters-react-native @react-native-community/async-storage@1

# Step 2: Link
# For React Native 0.60+
$ npx pod-install
# For React Native <= 0.59
# npx react-native link @react-native-community/async-storage
# For Expo (SDK >= 38) 无需 link
```

```即时通讯（含富媒体消息）
# Step 1: Install
$ yarn add leancloud-realtime leancloud-realtime-plugin-typed-messages leancloud-storage @leancloud/platform-adapters-react-native @react-native-community/async-storage@1

# Step 2: Link
# For React Native 0.60+
$ npx pod-install
# For React Native <= 0.59
# npx react-native link @react-native-community/async-storage
# For Expo (SDK >= 38) 无需 link
```

获得引用：

```存储服务
import AV from 'leancloud-storage/core';
import * as adapters from '@leancloud/platform-adapters-react-native';
AV.setAdapters(adapters);
```
```存储服务（LiveQuery)
import AV from 'leancloud-storage/live-query-core';
import * as adapters from '@leancloud/platform-adapters-react-native';
AV.setAdapters(adapters);
```
```即时通讯
import { Realtime, setAdapters } from 'leancloud-realtime/im';
import * as adapters from '@leancloud/platform-adapters-react-native';
setAdapters(adapters);
```
```即时通讯（含富媒体消息）
import AV from 'leancloud-storage/core';
import { Realtime, setAdapters } from 'leancloud-realtime/im';
import { TypedMessagesPlugin, ImageMessage } from 'leancloud-realtime-plugin-typed-messages';
import * as adapters from '@leancloud/platform-adapters-react-native';
AV.setAdapters(adapters);
setAdapters(adapters);
```

### Electron

Electron 使用包管理工具 npm 管理依赖，你可以通过以下命令安装 SDK：


```存储服务
$ npm install leancloud-storage --save
```

```存储服务（LiveQuery)
$ npm install leancloud-storage --save
```

```即时通讯
$ npm install leancloud-realtime --save
```

```即时通讯（含富媒体消息）
$ npm install leancloud-realtime leancloud-realtime-plugin-typed-messages leancloud-storage --save
```

#### 作为浏览器脚本引入

在 index.html 中可以通过 `script` 标签引入 SDK：

```存储服务
<script src="./node_modules/leancloud-storage/dist/av-min.js"></script>
```
```存储服务（LiveQuery)
<script src="./node_modules/leancloud-storage/dist/av-live-query-min.js"></script>
```
```即时通讯
<script src="./node_modules/leancloud-realtime/dist/im-browser.min.js"></script>
```
```即时通讯（含富媒体消息）
<script src="./node_modules/leancloud-storage/dist/av-min.js"></script>
<script src="./node_modules/leancloud-realtime/dist/im-browser.min.js"></script>
<script src="./node_modules/leancloud-realtime-plugin-typed-messages/dist/typed-messages.js"></script>
```

#### 作为 Node.js 模块引入

我们推荐使用 `script` 标签引入 SDK，该方式能满足绝大部分的需求。但是如果有以下的需求，SDK 也支持通过 `require('leancloud-storage')` 方法作为 Node.js 模块引入。

- 需要在 main process 中使用 SDK
- 需要使用 Node.js 的 `Buffer` 或 `Stream` 构造 `AV.File`

{{ docs.note("通过 Node.js `require` 方法引入的 SDK 与通过浏览器 `script` 标签引入的 SDK 是两个不同的 SDK，需要各自分别初始化，并且不能混用。") }}

### 其他平台

SDK 提供了平台无关的的版本以支持其他平台。所有平台相关的 API 被抽象成了可配置的 Adapters，在目标平台引入 SDK 后还需要配置目标平台的 Adapters。假设在 npm 上存在某平台（xyz）的 adapters package（`platform-adapters-xyz`），需要通过以下方式配置 SDK：

```存储服务
const AV = require('leancloud-storage/core');
const adapters = require('platform-adapters-xyz');
AV.setAdapters(adapters);
```
```存储服务（LiveQuery)
const AV = require('leancloud-storage/live-query-core');
const adapters = require('platform-adapters-xyz');
AV.setAdapters(adapters);
```
```即时通讯
const { Realtime, setAdapters } = require('leancloud-realtime/im');
const adapters = require('platform-adapters-xyz');
setAdapters(adapters);
```
```即时通讯（含富媒体消息）
const AV = require('leancloud-storage/core');
const { Realtime, setAdapters } = require('leancloud-realtime/im');
const { TypedMessagesPlugin, ImageMessage } = require('leancloud-realtime-plugin-typed-messages');
const adapters = require('platform-adapters-xyz');
AV.setAdapters(adapters);
setAdapters(adapters);
```

对于不支持使用 npm 管理依赖的运行环境，SDK 同时也提供了预编译好的 UMD 类型文件：

```存储服务
https://cdn.jsdelivr.net/npm/leancloud-storage@{{jssdkversion}}/dist/av-core-min.js
```
```存储服务（LiveQuery)
https://cdn.jsdelivr.net/npm/leancloud-storage@{{jssdkversion}}/dist/av-live-query-core-min.js
```
```即时通讯
https://cdn.jsdelivr.net/npm/leancloud-realtime@{{jsimsdkversion}}/dist/im.min.js
```
```即时通讯（含富媒体消息）
// 不支持该方式
```

开发者可以自行实现目标平台的 Adapters 来适配该平台。Adapters 的接口定义可以在 package [`@leancloud/adapter-types`](https://unpkg.com/browse/@leancloud/adapter-types/types.d.ts) 中找到。你也可以通过关键字 [`platform-adapters`](https://www.npmjs.com/search?q=keywords:platform-adapters) 查找社区中其他开发者贡献的 Adapters。
{% endif %}

{% if platform_name === ".NET" %}
### Unity

- 支持 Unity 5.3+。
<!-- 等升级 Unity 即时通讯的文档后再增加这句话 -->
<!-- - 支持 .NET 4.x。SDK 在 .NET 3.x 版本下仅做 Bug 维护，不再增加新版本，请大家尽快升级到 4.x 版本。 -->

支持使用 Unity 开发的 iOS、Android、UWP、Windows Desktop，以及网页游戏。

#### 安装数据存储

请下载 [Unity Storage](https://releases.leanapp.cn/#/leancloud/unity-sdk/releases) 最新版本的 zip 包，解压之后导入到你的 Unity 项目中。如果需要使用 LiveQuery，还需要安装下面的即时通讯 SDK。

#### 安装即时通讯

请下载 [Unity Realtime](https://releases.leanapp.cn/#/leancloud/realtime-SDK-dotNET/releases) 最新版本的 zip 包，解压之后导入到你的 Unity 项目中。

#### 依赖详解

安装包解压之后，每一个依赖的详细说明如下：

名称|模块描述
--|---
`AssemblyLister.dll`|LeanCloud 依赖检测模块，它负责检查相关依赖是否正确加载
`LeanCloud.Core.dll`|核心库，里面包含了 `AVObject` 和 `AVUser` 等所有内置类型的定义和序列化相关操作的功能
`LeanCloud.Storage.dll`|存储库，里面包含本地缓存以及 HTTP 请求发送的实现
`LeanCloud.Realtime.dll`|即时通讯库，里面包含了即时通讯协议的实现以及相关接口。存储的 LiveQuery 也依赖于这个库。

### .NET 平台

支持以下运行时：

- .NET Framework 4.5+

在 Visual Studio 执行安装 nuget 依赖：

```sh
# 安装存储，必选
PM> Install-Package LeanCloud.Storage
# 安装 LiveQuery，可选，如果需要实时数据同步功能则需要安装
PM> Install-Package LeanCloud.LiveQuery
# 安装即时通讯，可选，如果需要接入聊天则需要安装
PM> Install-Package LeanCloud.Realtime
```
{% endif %}

## 初始化

首先进入 **控制台 > 设置 > 应用 Key** 来获取 **App ID**，**App Key** 以及**服务器地址**。

{% if platform_name === "Objective-C" %}
打开 `AppDelegate` 文件，导入基础模块头文件：

```objc
#import <AVOSCloud/AVOSCloud.h>
```


然后在 `application:didFinishLaunchingWithOptions:` 方法中设置 App ID，App Key 以及服务器地址：

```objc
[AVOSCloud setApplicationId:{{appid}}
                  clientKey:{{appkey}}
            serverURLString:"https://please-replace-with-your-customized.domain.com"];
```

{{ docs.alert("在使用 SDK 的 API 时，请确保进行了 Application 的 ID、Key 以及 Server URL 的初始化。") }}

{{ requireServerURL() }}

{% endif %}
{% if platform_name === "Swift" %}
打开 `AppDelegate.swift` 文件，添加下列导入语句到头部：

```swift
import LeanCloud
```

然后在 `application(_:didFinishLaunchingWithOptions:)` 函数内设置 App ID，App Key 以及服务器地址：


```swift
do {
    try LCApplication.default.set(
        id: {{appid}},
        key: {{appkey}},
        serverURL: "https://please-replace-with-your-customized.domain.com")
} catch {
    print(error)
}
```

{{ docs.alert("在使用 SDK 的 API 时，请确保进行了 Application 的 ID、Key 以及 Server URL 的初始化。") }}

{{ requireServerURL() }}

```swift
//国际版应用初始化：
do {
    try LCApplication.default.set(
        id: {{appid}},
        key: {{appkey}})
} catch {
    print(error)
}
```

{% endif %}
{% if platform_name === "JavaScript" %}
无论是通过 npm 安装还是直接通过 CDN 加载，初始化的方法都是一样的。

```存储服务
AV.init({
  appId: "{{appid}}",
  appKey: "{{appkey}}",
  serverURL: "https://please-replace-with-your-customized.domain.com"
});
```

```存储服务（LiveQuery)
AV.init({
  appId: "{{appid}}",
  appKey: "{{appkey}}",
  serverURL: "https://please-replace-with-your-customized.domain.com"
});
```

```即时通讯
const realtime = new Realtime({
  appId: '{{appid}}',
  appKey: '{{appkey}}',
  server: 'https://please-replace-with-your-customized.domain.com',
});
```

```即时通讯（含富媒体消息）
const realtime = new Realtime({
  appId: '{{appid}}',
  appKey: '{{appkey}}',
  server: 'https://please-replace-with-your-customized.domain.com',
  // 初始化即时通讯服务时需要指定富媒体消息插件
  plugins: [TypedMessagesPlugin],
});
// 需要同时初始化存储服务
AV.init({
  appId: "{{appid}}",
  appKey: "{{appkey}}",
  serverURL: "https://please-replace-with-your-customized.domain.com"
});
```

{{ requireServerURL() }}

{% endif %}
{% if platform_name === "Python" %}
然后导入 `leancloud`，并调用 `init` 方法进行初始化：

```python
import leancloud

leancloud.init("{{appid}}", "{{appkey}}")
# 或者使用 Master Key
# leancloud.init("{{appid}}", master_key="{{masterkey}}")
```
{% endif %}
{% if platform_name === "PHP" %}
然后导入 `Client`，并调用 `initialize` 方法进行初始化：

```php
use \LeanCloud\Client;
// 参数依次为 App ID、App Key、Master Key
Client::initialize("{{appid}}", "{{appkey}}", "{{masterkey}}");
```

{% endif %}
{% if platform_name === "Android / Java" %}

### Android 平台初始化

如果是一个 Android 项目，则向 `Application` 类的 `onCreate` 方法添加：

```java
import cn.leancloud.AVOSCloud;

public class MyLeanCloudApp extends Application {
    @Override
    public void onCreate() {
        super.onCreate();

        // 提供 this、App ID、App Key、Server Host 作为参数
        // 注意这里千万不要调用 cn.leancloud.core.AVOSCloud 的 initialize 方法，否则会出现 NetworkOnMainThread 等错误。
        AVOSCloud.initialize(this, "{{appid}}", "{{appkey}}", "https://please-replace-with-your-customized.domain.com");
    }
}
```

{{ requireServerURL() }}

然后指定 SDK 需要的权限并在 `AndroidManifest.xml` 里面声明 `MyLeanCloudApp` 类：

```xml
<!-- 基本模块（必须）START -->
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.READ_PHONE_STATE" />
<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
<!-- 基本模块 END -->

<application
  …
  android:name=".MyLeanCloudApp" >

  <!-- 即时通讯和推送 START -->
  <!-- 即时通讯和推送都需要 PushService -->
  <service android:name="cn.leancloud.push.PushService"/>
  <receiver android:name="cn.leancloud.push.AVBroadcastReceiver">
    <intent-filter>
      <action android:name="android.intent.action.BOOT_COMPLETED"/>
      <action android:name="android.intent.action.USER_PRESENT"/>
      <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
    </intent-filter>
  </receiver>
  <!-- 即时通讯和推送 END -->
</application>

```

> 注意：对于**只使用 LeanCloud 即时通讯服务**，而**不使用推送服务**的应用来说，在初始化的时候设置 AVIMOptions#disableAutoLogin4Push 选项，可以加快即时通讯用户登录的过程。设置方法如下：
```
// 在 AVOSCloud#initialize 之后调用，禁止自动发送推送服务的 login 请求。
AVIMOptions.getGlobalOptions().setDisableAutoLogin4Push(true);
```

#### 更安全的客户端初始化方法

对 Android 开发者来说，从 6.1.0 版本开始，除了支持通过 appId + appKey 完成初始化，我们还提供一种更加安全的使用方式，支持仅仅通过 appId 来初始化应用，例如：

{{ android_key_init(appid) }}

这时候程序初始化不再需要 appKey，避免了核心配置信息在客户端泄漏可能带来的潜在风险。具体的集成方法可参看文档 [Android SDK 更安全的接入和初始化方式](sdk_setup_android_securely.html)。


### Java 平台初始化代码

如果是一个普通 Java 项目，则在代码开头添加：

```java
import cn.leancloud.core.AVOSCloud;

AVOSCloud.initialize("{{appid}}", "{{appkey}}", "https://please-replace-with-your-customized.domain.com");
```

注意，云引擎内部访问 API 是通过内网，所以不需要也不应该配置 API 自定义域名（`serverUrl`）。
模板项目和[云引擎网站托管开发指南](leanengine_webhosting_guide-java.html)中的示例代码均未配置 API 自定义域名，
请勿调用 `setServer`，否则会变成公网访问，影响性能。

LeanCloud realtime-core library 也支持在纯 Java Application 中使用，但是与 Android 的调用方式有细微差异，Java Application 中需要开发者显式建立与 LeanCloud 即时通讯云端的长链接（Android 平台是通过 PushService 自动建立的）。建立长链接的方法如下：
```
AVConnectionManager.getInstance().startConnection(callback);
```
只有长链接成功建立之后，后续的聊天请求才能开始。

{% endif %}
{% if platform_name === ".NET" %}
导入基础模块：

```cs
// 导入存储模块
using LeanCloud;
// 如果需要，导入聊天模块
using LeanCloud.Realtime;
```

### 数据存储初始化

在使用「数据存储」服务前，调用如下代码：


```cs
AVClient.Initialize("{{appid}}", "{{appkey}}", "https://please-replace-with-your-customized.domain.com");
```

{{ requireServerURL() }}

注意，云引擎内部访问 API 是通过内网，所以不需要也不应该配置 API 自定义域名。
模板项目和[云引擎网站托管开发指南](leanengine_webhosting_guide-dotnet.html)中的示例代码均未配置 API 自定义域名，
请勿设置 ApiServer，以免变成公网访问，影响性能。

#### LiveQuery
在安装[即时通讯 SDK](#安装即时通讯) 后，需要进入 [控制台 > 存储 > 设置](https://leancloud.cn/dashboard/storage.html?appid={{appid}}#/storage/conf)，在 **其他** 里面勾选 **启用 LiveQuery**，然后按照下面的代码初始化。

```cs
Websockets.Net.WebsocketConnection.Link(); // Unity 下不需要此行设置
const realtime = new AVRealtime(new AVRealtime.Configuration {
    ApplicationId = appId,
    ApplicationKey = appKey,
    RTMRouter = new Uri("https://please-replace-with-your-customized.domain.com")
});
AVLiveQuery.Channel = realtime;
```

{{ requireServerURL() }}

### 即时通讯初始化

在使用「即时通讯」服务前，调用如下代码：

```cs
const realtime = new AVRealtime(new AVRealtime.Configuration
{
    ApplicationId = "{{appid}}",
    ApplicationKey = "{{appkey}}",
    RTMRouter = new Uri("https://please-replace-with-your-customized.domain.com")
});
```

{{ requireServerURL() }}
{% endif %}

{% if platform_name === "Flutter" %}

#### 数据存储
使用 SDK 时添加下列导入语句到头部：

```dart
import 'package:leancloud_storage/leancloud.dart';
```

然后在 lib/main.dart 设置 App ID，App Key 以及服务器地址：

```dart
LeanCloud.initialize(
    '{{appid}}', '{{appkey}}',
    server: 'https://please-replace-with-your-customized.domain.com',
    queryCache: new LCQueryCache());
```

{{ requireServerURL() }}

#### 即时通信

使用 SDK 时添加下列导入语句到头部：

```dart
import 'package:leancloud_official_plugin/leancloud_plugin.dart';
```

**使用Flutter 即时通信插件需要在 Android 和 iOS 平台分别初始化。**

##### Android 平台初始化

首先向 Application 类的 onCreate 方法添加：
```java
import cn.leancloud.AVOSCloud;
import cn.leancloud.AVLogger;
import io.flutter.app.FlutterApplication;

public class MyLeanCloudApp extends FlutterApplication {
    @Override
    public void onCreate() {
        super.onCreate();
        //开启未读消息数更新通知
        AVIMOptions.getGlobalOptions().setUnreadNotificationEnabled(true);
        //开启调试日志
        AVOSCloud.setLogLevel(AVLogger.Level.DEBUG);
        // 提供 this、App ID、App Key、Server Host 作为参数
        // 请将 xxx.example.com 替换为你的应用绑定的 API 域名
        AVOSCloud.initialize(this, "{{appid}}", "{{appkey}}", "https://please-replace-with-your-customized.domain.com");
    }
}
```
然后指定 SDK 需要的权限并在 AndroidManifest.xml 里面声明 MyLeanCloudApp 类：

```xml
<!-- 基本模块（必须）START -->
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.READ_PHONE_STATE" />
<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
<!-- 基本模块 END -->

<application
  …
  android:name=".MyLeanCloudApp" >

  <!-- 即时通讯和推送 START -->
  <!-- 即时通讯和推送都需要 PushService -->
  <service android:name="cn.leancloud.push.PushService"/>
  <receiver android:name="cn.leancloud.push.AVBroadcastReceiver">
    <intent-filter>
      <action android:name="android.intent.action.BOOT_COMPLETED"/>
      <action android:name="android.intent.action.USER_PRESENT"/>
      <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
    </intent-filter>
  </receiver>
  <!-- 即时通讯和推送 END -->
</application>
```
##### iOS 平台初始化

在 AppDelegate.swift 中加入如下初始化代码：

```swift
import Flutter
import LeanCloud

@UIApplicationMain
@objc class AppDelegate: FlutterAppDelegate {
    override func application(
        _ application: UIApplication,
        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
    ) -> Bool {
        do {
            LCApplication.logLevel = .all
            try LCApplication.default.set(
                id: "{{appid}}",
                key: "{{appkey}}",
                serverURL: "https://xxx.example.com")
            GeneratedPluginRegistrant.register(with: self)
            return super.application(application, didFinishLaunchingWithOptions: launchOptions)
        } catch {
            fatalError("\(error)")
        }
    }
}
```

{% endif %}

## 开启调试日志

在应用开发阶段，你可以选择开启 SDK 的调试日志（debug log）来方便追踪问题。调试日志开启后，SDK 会把网络请求、错误消息等信息输出到 IDE 的日志窗口，或是浏览器 Console 或是 LeanCloud 控制台的云引擎日志中。

{% if platform_name === "Objective-C" %}
```objc
// 在 Application 初始化代码执行之前执行
[AVOSCloud setAllLogsEnabled:YES];
```

详细调试流程可以参考 [Objective-C SDK 调试指南][objc-debug-guide]。

[objc-debug-guide]: https://forum.leancloud.cn/t/leancloud-sdk-objective-c-sdk/21851
{% endif %}
{% if platform_name === "Swift" %}
```swift
// 在 Application 初始化代码执行之前执行
LCApplication.logLevel = .all
```
{% endif %}
{% if platform_name === "JavaScript" %}
如果是在 Node.js 中运行，可以在通过在启动应用时设置环境变量来打印调试日志（下面假设启动应用的命令是 `npm start`）：

```存储服务
DEBUG=leancloud* npm start
```

```存储服务（LiveQuery)
DEBUG=leancloud*,LC* npm start
```

```即时通讯
DEBUG=LC* npm start
```

```即时通讯（含富媒体消息）
DEBUG=LC* npm start
```

如果是在浏览器中运行，可以通过设置 `localStorage` 来让日志打印到浏览器控制台：

```存储服务
localStorage.setItem('debug', 'leancloud*');
```

```存储服务（LiveQuery)
localStorage.setItem('debug', 'leancloud*,LC*');
```

```即时通讯
localStorage.setItem('debug', 'LC*');
```

```即时通讯（含富媒体消息）
localStorage.setItem('debug', 'LC*');
```

除了在 Node.js 中使用环境变量，在浏览器中使用 localStorage 启用调试模式外，新版本的 SDK 还支持在代码中启用、停用调试模式。

```存储服务
// 需要 SDK 版本 >= v3.14.0
const AV = require('leancloud-storage');
AV.debug.enable();  // 启用
AV.debug.disable(); // 停用
```

```存储服务（LiveQuery)
// 需要 SDK 版本 >= v3.14.0
const AV = require('leancloud-storage');
AV.debug.enable();  // 启用
AV.debug.disable(); // 停用
```

```即时通讯
// 需要 SDK 版本 >= v5.0.0-alpha.1
const { debug } = require('leancloud-realtime');
debug.enable();  // 启用
debug.disable(); // 停用
```

```即时通讯（含富媒体消息）
// 需要 SDK 版本 >= v5.0.0-alpha.1
const { debug } = require('leancloud-realtime');
debug.enable();  // 启用
debug.disable(); // 停用
```

{% endif %}
{% if platform_name === "Python" %}
```python
# 写在启动脚本的头部
# 如果是在云引擎环境，启动脚本是 wsgi.py
import logging

logging.basicConfig(level=logging.DEBUG)
```
{% endif %}
{% if platform_name === "PHP" %}
```php
// 放在 SDK 初始化语句 Client::initialize() 后面，只需要调用一次即可
Client::setDebug(true);
```
{% endif %}
{% if platform_name === "Android / Java" %}
```java
// 在 AVOSCloud.initialize() 之前调用
AVOSCloud.setLogLevel(AVLogger.Level.DEBUG);
```

详细调试流程可以参考[Android SDK 调试指南][android-debug-guide]。

[android-debug-guide]: https://forum.leancloud.cn/t/leancloud-sdk-android-sdk/21829
{% endif %}
{% if platform_name === ".NET" %}
```cs
// 开启存储日志
AVClient.HttpLog(Debug.Log);

// 开启即时通讯日志
AVRealtime.WebSocketLog(Debug.Log);
```
{% endif %}

{% if platform_name === "Objective-C" or platform_name === "Swift" %}
### 关闭调试日志

{% if platform_name === "Objective-C" %}
```objc
// 在 Application 初始化代码执行之前执行
[AVOSCloud setAllLogsEnabled:NO];
[AVOSCloud setLogLevel:AVLogLevelNone];
[AVOSCloud setVerbosePolicy:kAVVerboseNone];
```
{% endif %}
{% if platform_name === "Swift" %}
```swift
// 在 Application 初始化代码执行之前执行
LCApplication.logLevel = .off
```
{% endif %}
{% endif %}

{% if platform_name === "Flutter" %}
数据存储服务开启调试日志：
```dart
// 在 LeanCloud.initialize 初始化之后执行
LCLogger.setLevel(LCLogger.DebugLevel);
```
即时通信服务开启调试日志方式同 Swift SDK 与 Java Unified SDK。
{% endif %}

{% call docs.alertWrap() %}
在应用发布之前，请关闭调试日志，以免暴露敏感数据。
{% endcall %}

## 验证

首先，确认本地网络环境是可以访问 LeanCloud 服务器的，可以执行以下命令：

```sh
ping "{{host}}"
```

`{{host}}` 为绑定的 API 自定义域名。

如果当前网路正常将会得到如下响应：

```sh
PING api-ucloud.leancloud.cn (123.59.41.31): 56 data bytes
64 bytes from 123.59.41.31: icmp_seq=0 ttl=51 time=9.032 ms
64 bytes from 123.59.41.31: icmp_seq=1 ttl=51 time=7.290 ms
64 bytes from 123.59.41.31: icmp_seq=2 ttl=51 time=8.131 ms
64 bytes from 123.59.41.31: icmp_seq=3 ttl=51 time=9.689 ms
64 bytes from 123.59.41.31: icmp_seq=4 ttl=51 time=6.559 ms
64 bytes from 123.59.41.31: icmp_seq=5 ttl=51 time=8.665 ms
64 bytes from 123.59.41.31: icmp_seq=6 ttl=51 time=8.041 ms
64 bytes from 123.59.41.31: icmp_seq=7 ttl=51 time=8.203 ms
64 bytes from 123.59.41.31: icmp_seq=8 ttl=51 time=6.288 ms
64 bytes from 123.59.41.31: icmp_seq=9 ttl=51 time=7.938 ms

--- api-ucloud.leancloud.cn ping statistics ---
10 packets transmitted, 10 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 6.288/7.984/9.689/0.997 ms
```

{% if platform_name === "Objective-C" %}
下面来试着向 LeanCloud 云端保存一条数据，将下面的代码拷贝到 `viewDidLoad` 方法或其它在应用运行时会被调用的方法中：

```objc
AVObject *testObject = [AVObject objectWithClassName:@"TestObject"];
[testObject setObject:@"Hello world!" forKey:@"words"];
[testObject save];
```

然后，点击 `Run` 运行调试，真机和虚拟机均可。
{% endif %}
{% if platform_name === "Swift" %}
下面来试着向 LeanCloud 云端保存一条数据，将下面的代码拷贝到 `viewDidLoad` 函数或其它在应用运行时会被调用的函数中：

```swift
do {
    let testObject = LCObject(className: "TestObject")
    try testObject.set("words", value: "Hello world!")
    let result = testObject.save()
    if let error = result.error {
        print(error)
    }
} catch {
    print(error)
}
```

然后，点击 `Run` 运行调试，真机和虚拟机均可。
{% endif %}

{% if platform_name === "JavaScript" %}
然后在项目中编写如下测试代码：

```js
const TestObject = AV.Object.extend('TestObject');
const testObject = new TestObject();
testObject.set('words', 'Hello world!');
testObject.save().then((testObject) => {
  console.log('保存成功。')
})
```

保存后运行程序。
{% endif %}
{% if platform_name === "Python" %}
然后在项目中编写如下测试代码：

```python
TestObject = leancloud.Object.extend('TestObject')
test_object = TestObject()
test_object.set('words', "Hello world!")
test_object.save()
```

保存后运行程序。
{% endif %}
{% if platform_name === "PHP" %}
然后在项目中编写如下测试代码：

```php
$testObject = new LeanObject("TestObject");
$testObject->set("words", "Hello world!");
try {
    $testObject->save();
    echo "保存成功。";
} catch (Exception $ex) {
    echo "保存失败。";
}
```

保存后运行程序。
{% endif %}
{% if platform_name === "Android / Java" %}
然后在项目中编写如下测试代码：

```java
AVObject testObject = new AVObject("TestObject");
testObject.put("words", "Hello world!");
testObject.saveInBackground().blockingSubscribe();
```

保存后运行程序。
{% endif %}
{% if platform_name === ".NET" %}
然后在项目中编写如下测试代码：

```cs
AVObject testObject = new AVObject("TestObject");
testObject["words"] = "Hello world!";
Task saveTask = testObject.SaveAsync();
await saveTask;
```

保存后运行程序。
{% endif %}

{% if platform_name === "Flutter" %}
然后在项目 lib/main.dart 中编写如下测试代码：

```dart
LCObject object = LCObject('TestObject');
object['words'] = 'Hello world!';
await object.save();
```

保存后运行程序。
{% endif %}

然后打开 **控制台 > 存储 > 数据 > `TestObject`**，如果看到如下内容，说明 SDK 已经正确地执行了上述代码，安装完毕。

![数据表中出现一行「words」值为「Hello world!」的数据。](images/testobject_saved.png)

如果控制台没有发现对应的数据，请参考 [问题排查](#问题排查)。

## 问题排查

SDK 安装指南基于当前最新版本的 SDK 编写，所以排查问题前，请先检查下安装的 SDK 是不是最新版本。

### `401 Unauthorized`

如果 SDK 抛出 `401` 异常或者查看本地网络访问日志存在：

```json
{
  "code": 401,
  "error": "Unauthorized."
}
```

则可认定为 App ID 或者 App Key 输入有误，或者是不匹配，很多开发者同时注册了多个应用，导致拷贝粘贴的时候，用 A 应用的 App ID 匹配 B 应用的 App Key，这样就会出现服务端鉴权失败的错误。

### 客户端无法访问网络

客户端尤其是手机端，应用在访问网络的时候需要申请一定的权限。
